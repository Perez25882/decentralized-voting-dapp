{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport { Interface, Typed } from \"../abi/index.js\";\nimport { isAddressable, resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log } from \"../providers/provider.js\";\nimport { defineProperties, getBigInt, isCallException, isHexString, resolveProperties, isError, makeError, assert, assertArgument } from \"../utils/index.js\";\nimport { ContractEventPayload, ContractUnknownEventPayload, ContractTransactionResponse, EventLog, UndecodedEventLog } from \"./wrappers.js\";\nconst BN_0 = BigInt(0);\nfunction canCall(value) {\n  return value && typeof value.call === \"function\";\n}\nfunction canEstimate(value) {\n  return value && typeof value.estimateGas === \"function\";\n}\nfunction canResolve(value) {\n  return value && typeof value.resolveName === \"function\";\n}\nfunction canSend(value) {\n  return value && typeof value.sendTransaction === \"function\";\n}\nfunction getResolver(value) {\n  if (value != null) {\n    if (canResolve(value)) {\n      return value;\n    }\n    if (value.provider) {\n      return value.provider;\n    }\n  }\n  return undefined;\n}\nvar _filter = /*#__PURE__*/_classPrivateFieldLooseKey(\"filter\");\nclass PreparedTopicFilter {\n  constructor(contract, fragment, args) {\n    Object.defineProperty(this, _filter, {\n      writable: true,\n      value: void 0\n    });\n    defineProperties(this, {\n      fragment\n    });\n    if (fragment.inputs.length < args.length) {\n      throw new Error(\"too many arguments\");\n    }\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(contract.runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    _classPrivateFieldLooseBase(this, _filter)[_filter] = async function () {\n      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n        const arg = args[index];\n        if (arg == null) {\n          return null;\n        }\n        return param.walkAsync(args[index], (type, value) => {\n          if (type === \"address\") {\n            if (Array.isArray(value)) {\n              return Promise.all(value.map(v => resolveAddress(v, resolver)));\n            }\n            return resolveAddress(value, resolver);\n          }\n          return value;\n        });\n      }));\n      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n    }();\n  }\n  getTopicFilter() {\n    return _classPrivateFieldLooseBase(this, _filter)[_filter];\n  }\n}\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\nfunction getRunner(value, feature) {\n  if (value == null) {\n    return null;\n  }\n  if (typeof value[feature] === \"function\") {\n    return value;\n  }\n  if (value.provider && typeof value.provider[feature] === \"function\") {\n    return value.provider;\n  }\n  return null;\n}\nfunction getProvider(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.provider || null;\n}\n/**\n *  @_ignore:\n */\nexport async function copyOverrides(arg, allowed) {\n  // Make sure the overrides passed in are a valid overrides object\n  const _overrides = Typed.dereference(arg, \"overrides\");\n  assertArgument(typeof _overrides === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n  // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n  const overrides = copyRequest(_overrides);\n  assertArgument(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n  assertArgument(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n  // Resolve any from\n  if (overrides.from) {\n    overrides.from = overrides.from;\n  }\n  return overrides;\n}\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner, inputs, args) {\n  // Recursively descend into args and resolve any addresses\n  const runner = getRunner(_runner, \"resolveName\");\n  const resolver = canResolve(runner) ? runner : null;\n  return await Promise.all(inputs.map((param, index) => {\n    return param.walkAsync(args[index], (type, value) => {\n      value = Typed.dereference(value, type);\n      if (type === \"address\") {\n        return resolveAddress(value, resolver);\n      }\n      return value;\n    });\n  }));\n}\nfunction buildWrappedFallback(contract) {\n  const populateTransaction = async function (overrides) {\n    // If an overrides was passed in, copy it and normalize the values\n    const tx = await copyOverrides(overrides, [\"data\"]);\n    tx.to = await contract.getAddress();\n    if (tx.from) {\n      tx.from = await resolveAddress(tx.from, getResolver(contract.runner));\n    }\n    const iface = contract.interface;\n    const noValue = getBigInt(tx.value || BN_0, \"overrides.value\") === BN_0;\n    const noData = (tx.data || \"0x\") === \"0x\";\n    if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n      assertArgument(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n    }\n    assertArgument(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n    // Only allow payable contracts to set non-zero value\n    const payable = iface.receive || iface.fallback && iface.fallback.payable;\n    assertArgument(payable || noValue, \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n    // Only allow fallback contracts to set non-empty data\n    assertArgument(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n    return tx;\n  };\n  const staticCall = async function (overrides) {\n    const runner = getRunner(contract.runner, \"call\");\n    assert(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"call\"\n    });\n    const tx = await populateTransaction(overrides);\n    try {\n      return await runner.call(tx);\n    } catch (error) {\n      if (isCallException(error) && error.data) {\n        throw contract.interface.makeError(error.data, tx);\n      }\n      throw error;\n    }\n  };\n  const send = async function (overrides) {\n    const runner = contract.runner;\n    assert(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const tx = await runner.sendTransaction(await populateTransaction(overrides));\n    const provider = getProvider(contract.runner);\n    // @TODO: the provider can be null; make a custom dummy provider that will throw a\n    // meaningful error\n    return new ContractTransactionResponse(contract.interface, provider, tx);\n  };\n  const estimateGas = async function (overrides) {\n    const runner = getRunner(contract.runner, \"estimateGas\");\n    assert(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"estimateGas\"\n    });\n    return await runner.estimateGas(await populateTransaction(overrides));\n  };\n  const method = async overrides => {\n    return await send(overrides);\n  };\n  defineProperties(method, {\n    _contract: contract,\n    estimateGas,\n    populateTransaction,\n    send,\n    staticCall\n  });\n  return method;\n}\nfunction buildWrappedMethod(contract, key) {\n  const getFragment = function (...args) {\n    const fragment = contract.interface.getFunction(key, args);\n    assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\",\n      info: {\n        key,\n        args\n      }\n    });\n    return fragment;\n  };\n  const populateTransaction = async function (...args) {\n    const fragment = getFragment(...args);\n    // If an overrides was passed in, copy it and normalize the values\n    let overrides = {};\n    if (fragment.inputs.length + 1 === args.length) {\n      overrides = await copyOverrides(args.pop());\n      if (overrides.from) {\n        overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));\n      }\n    }\n    if (fragment.inputs.length !== args.length) {\n      throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n    }\n    const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n    return Object.assign({}, overrides, await resolveProperties({\n      to: contract.getAddress(),\n      data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n    }));\n  };\n  const staticCall = async function (...args) {\n    const result = await staticCallResult(...args);\n    if (result.length === 1) {\n      return result[0];\n    }\n    return result;\n  };\n  const send = async function (...args) {\n    const runner = contract.runner;\n    assert(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const tx = await runner.sendTransaction(await populateTransaction(...args));\n    const provider = getProvider(contract.runner);\n    // @TODO: the provider can be null; make a custom dummy provider that will throw a\n    // meaningful error\n    return new ContractTransactionResponse(contract.interface, provider, tx);\n  };\n  const estimateGas = async function (...args) {\n    const runner = getRunner(contract.runner, \"estimateGas\");\n    assert(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"estimateGas\"\n    });\n    return await runner.estimateGas(await populateTransaction(...args));\n  };\n  const staticCallResult = async function (...args) {\n    const runner = getRunner(contract.runner, \"call\");\n    assert(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"call\"\n    });\n    const tx = await populateTransaction(...args);\n    let result = \"0x\";\n    try {\n      result = await runner.call(tx);\n    } catch (error) {\n      if (isCallException(error) && error.data) {\n        throw contract.interface.makeError(error.data, tx);\n      }\n      throw error;\n    }\n    const fragment = getFragment(...args);\n    return contract.interface.decodeFunctionResult(fragment, result);\n  };\n  const method = async (...args) => {\n    const fragment = getFragment(...args);\n    if (fragment.constant) {\n      return await staticCall(...args);\n    }\n    return await send(...args);\n  };\n  defineProperties(method, {\n    name: contract.interface.getFunctionName(key),\n    _contract: contract,\n    _key: key,\n    getFragment,\n    estimateGas,\n    populateTransaction,\n    send,\n    staticCall,\n    staticCallResult\n  });\n  // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n  Object.defineProperty(method, \"fragment\", {\n    configurable: false,\n    enumerable: true,\n    get: () => {\n      const fragment = contract.interface.getFunction(key);\n      assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fragment\",\n        info: {\n          key\n        }\n      });\n      return fragment;\n    }\n  });\n  return method;\n}\nfunction buildWrappedEvent(contract, key) {\n  const getFragment = function (...args) {\n    const fragment = contract.interface.getEvent(key, args);\n    assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\",\n      info: {\n        key,\n        args\n      }\n    });\n    return fragment;\n  };\n  const method = function (...args) {\n    return new PreparedTopicFilter(contract, getFragment(...args), args);\n  };\n  defineProperties(method, {\n    name: contract.interface.getEventName(key),\n    _contract: contract,\n    _key: key,\n    getFragment\n  });\n  // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n  Object.defineProperty(method, \"fragment\", {\n    configurable: false,\n    enumerable: true,\n    get: () => {\n      const fragment = contract.interface.getEvent(key);\n      assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"fragment\",\n        info: {\n          key\n        }\n      });\n      return fragment;\n    }\n  });\n  return method;\n}\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\nconst internal = Symbol.for(\"_ethersInternal_contract\");\nconst internalValues = new WeakMap();\nfunction setInternal(contract, values) {\n  internalValues.set(contract[internal], values);\n}\nfunction getInternal(contract) {\n  return internalValues.get(contract[internal]);\n}\nfunction isDeferred(value) {\n  return value && typeof value === \"object\" && \"getTopicFilter\" in value && typeof value.getTopicFilter === \"function\" && value.fragment;\n}\nasync function getSubInfo(contract, event) {\n  let topics;\n  let fragment = null;\n  // Convert named events to topicHash and get the fragment for\n  // events which need deconstructing.\n  if (Array.isArray(event)) {\n    const topicHashify = function (name) {\n      if (isHexString(name, 32)) {\n        return name;\n      }\n      const fragment = contract.interface.getEvent(name);\n      assertArgument(fragment, \"unknown fragment\", \"name\", name);\n      return fragment.topicHash;\n    };\n    // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n    topics = event.map(e => {\n      if (e == null) {\n        return null;\n      }\n      if (Array.isArray(e)) {\n        return e.map(topicHashify);\n      }\n      return topicHashify(e);\n    });\n  } else if (event === \"*\") {\n    topics = [null];\n  } else if (typeof event === \"string\") {\n    if (isHexString(event, 32)) {\n      // Topic Hash\n      topics = [event];\n    } else {\n      // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n      fragment = contract.interface.getEvent(event);\n      assertArgument(fragment, \"unknown fragment\", \"event\", event);\n      topics = [fragment.topicHash];\n    }\n  } else if (isDeferred(event)) {\n    // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n    topics = await event.getTopicFilter();\n  } else if (\"fragment\" in event) {\n    // ContractEvent; e.g. `contract.filter.Transfer`\n    fragment = event.fragment;\n    topics = [fragment.topicHash];\n  } else {\n    assertArgument(false, \"unknown event name\", \"event\", event);\n  }\n  // Normalize topics and sort TopicSets\n  topics = topics.map(t => {\n    if (t == null) {\n      return null;\n    }\n    if (Array.isArray(t)) {\n      const items = Array.from(new Set(t.map(t => t.toLowerCase())).values());\n      if (items.length === 1) {\n        return items[0];\n      }\n      items.sort();\n      return items;\n    }\n    return t.toLowerCase();\n  });\n  const tag = topics.map(t => {\n    if (t == null) {\n      return \"null\";\n    }\n    if (Array.isArray(t)) {\n      return t.join(\"|\");\n    }\n    return t;\n  }).join(\"&\");\n  return {\n    fragment,\n    tag,\n    topics\n  };\n}\nasync function hasSub(contract, event) {\n  const {\n    subs\n  } = getInternal(contract);\n  return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\nasync function getSub(contract, operation, event) {\n  // Make sure our runner can actually subscribe to events\n  const provider = getProvider(contract.runner);\n  assert(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", {\n    operation\n  });\n  const {\n    fragment,\n    tag,\n    topics\n  } = await getSubInfo(contract, event);\n  const {\n    addr,\n    subs\n  } = getInternal(contract);\n  let sub = subs.get(tag);\n  if (!sub) {\n    const address = addr ? addr : contract;\n    const filter = {\n      address,\n      topics\n    };\n    const listener = log => {\n      let foundFragment = fragment;\n      if (foundFragment == null) {\n        try {\n          foundFragment = contract.interface.getEvent(log.topics[0]);\n        } catch (error) {}\n      }\n      // If fragment is null, we do not deconstruct the args to emit\n      if (foundFragment) {\n        const _foundFragment = foundFragment;\n        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n        emit(contract, event, args, listener => {\n          return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n        });\n      } else {\n        emit(contract, event, [], listener => {\n          return new ContractUnknownEventPayload(contract, listener, event, log);\n        });\n      }\n    };\n    let starting = [];\n    const start = () => {\n      if (starting.length) {\n        return;\n      }\n      starting.push(provider.on(filter, listener));\n    };\n    const stop = async () => {\n      if (starting.length == 0) {\n        return;\n      }\n      let started = starting;\n      starting = [];\n      await Promise.all(started);\n      provider.off(filter, listener);\n    };\n    sub = {\n      tag,\n      listeners: [],\n      start,\n      stop\n    };\n    subs.set(tag, sub);\n  }\n  return sub;\n}\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit = Promise.resolve();\nasync function _emit(contract, event, args, payloadFunc) {\n  await lastEmit;\n  const sub = await hasSub(contract, event);\n  if (!sub) {\n    return false;\n  }\n  const count = sub.listeners.length;\n  sub.listeners = sub.listeners.filter(({\n    listener,\n    once\n  }) => {\n    const passArgs = Array.from(args);\n    if (payloadFunc) {\n      passArgs.push(payloadFunc(once ? null : listener));\n    }\n    try {\n      listener.call(contract, ...passArgs);\n    } catch (error) {}\n    return !once;\n  });\n  if (sub.listeners.length === 0) {\n    sub.stop();\n    getInternal(contract).subs.delete(sub.tag);\n  }\n  return count > 0;\n}\nasync function emit(contract, event, args, payloadFunc) {\n  try {\n    await lastEmit;\n  } catch (error) {}\n  const resultPromise = _emit(contract, event, args, payloadFunc);\n  lastEmit = resultPromise;\n  return await resultPromise;\n}\nconst passProperties = [\"then\"];\nexport class BaseContract {\n  /**\n   *  The target to connect to.\n   *\n   *  This can be an address, ENS name or any [[Addressable]], such as\n   *  another contract. To get the resovled address, use the ``getAddress``\n   *  method.\n   */\n\n  /**\n   *  The contract Interface.\n   */\n\n  /**\n   *  The connected runner. This is generally a [[Provider]] or a\n   *  [[Signer]], which dictates what operations are supported.\n   *\n   *  For example, a **Contract** connected to a [[Provider]] may\n   *  only execute read-only operations.\n   */\n\n  /**\n   *  All the Events available on this contract.\n   */\n\n  /**\n   *  @_ignore:\n   */\n\n  /**\n   *  The fallback or receive function if any.\n   */\n\n  /**\n   *  Creates a new contract connected to %%target%% with the %%abi%% and\n   *  optionally connected to a %%runner%% to perform operations on behalf\n   *  of.\n   */\n  constructor(target, abi, runner, _deployTx) {\n    assertArgument(typeof target === \"string\" || isAddressable(target), \"invalid value for Contract target\", \"target\", target);\n    if (runner == null) {\n      runner = null;\n    }\n    const iface = Interface.from(abi);\n    defineProperties(this, {\n      target,\n      runner,\n      interface: iface\n    });\n    Object.defineProperty(this, internal, {\n      value: {}\n    });\n    let addrPromise;\n    let addr = null;\n    let deployTx = null;\n    if (_deployTx) {\n      const provider = getProvider(runner);\n      // @TODO: the provider can be null; make a custom dummy provider that will throw a\n      // meaningful error\n      deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);\n    }\n    let subs = new Map();\n    // Resolve the target as the address\n    if (typeof target === \"string\") {\n      if (isHexString(target)) {\n        addr = target;\n        addrPromise = Promise.resolve(target);\n      } else {\n        const resolver = getRunner(runner, \"resolveName\");\n        if (!canResolve(resolver)) {\n          throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"resolveName\"\n          });\n        }\n        addrPromise = resolver.resolveName(target).then(addr => {\n          if (addr == null) {\n            throw makeError(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n              value: target\n            });\n          }\n          getInternal(this).addr = addr;\n          return addr;\n        });\n      }\n    } else {\n      addrPromise = target.getAddress().then(addr => {\n        if (addr == null) {\n          throw new Error(\"TODO\");\n        }\n        getInternal(this).addr = addr;\n        return addr;\n      });\n    }\n    // Set our private values\n    setInternal(this, {\n      addrPromise,\n      addr,\n      deployTx,\n      subs\n    });\n    // Add the event filters\n    const filters = new Proxy({}, {\n      get: (target, prop, receiver) => {\n        // Pass important checks (like `then` for Promise) through\n        if (typeof prop === \"symbol\" || passProperties.indexOf(prop) >= 0) {\n          return Reflect.get(target, prop, receiver);\n        }\n        try {\n          return this.getEvent(prop);\n        } catch (error) {\n          if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n            throw error;\n          }\n        }\n        return undefined;\n      },\n      has: (target, prop) => {\n        // Pass important checks (like `then` for Promise) through\n        if (passProperties.indexOf(prop) >= 0) {\n          return Reflect.has(target, prop);\n        }\n        return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n      }\n    });\n    defineProperties(this, {\n      filters\n    });\n    defineProperties(this, {\n      fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null\n    });\n    // Return a Proxy that will respond to functions\n    return new Proxy(this, {\n      get: (target, prop, receiver) => {\n        if (typeof prop === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n          return Reflect.get(target, prop, receiver);\n        }\n        // Undefined properties should return undefined\n        try {\n          return target.getFunction(prop);\n        } catch (error) {\n          if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n            throw error;\n          }\n        }\n        return undefined;\n      },\n      has: (target, prop) => {\n        if (typeof prop === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n          return Reflect.has(target, prop);\n        }\n        return target.interface.hasFunction(prop);\n      }\n    });\n  }\n  /**\n   *  Return a new Contract instance with the same target and ABI, but\n   *  a different %%runner%%.\n   */\n  connect(runner) {\n    return new BaseContract(this.target, this.interface, runner);\n  }\n  /**\n   *  Return a new Contract instance with the same ABI and runner, but\n   *  a different %%target%%.\n   */\n  attach(target) {\n    return new BaseContract(target, this.interface, this.runner);\n  }\n  /**\n   *  Return the resolved address of this Contract.\n   */\n  async getAddress() {\n    return await getInternal(this).addrPromise;\n  }\n  /**\n   *  Return the deployed bytecode or null if no bytecode is found.\n   */\n  async getDeployedCode() {\n    const provider = getProvider(this.runner);\n    assert(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"getDeployedCode\"\n    });\n    const code = await provider.getCode(await this.getAddress());\n    if (code === \"0x\") {\n      return null;\n    }\n    return code;\n  }\n  /**\n   *  Resolve to this Contract once the bytecode has been deployed, or\n   *  resolve immediately if already deployed.\n   */\n  async waitForDeployment() {\n    // We have the deployement transaction; just use that (throws if deployement fails)\n    const deployTx = this.deploymentTransaction();\n    if (deployTx) {\n      await deployTx.wait();\n      return this;\n    }\n    // Check for code\n    const code = await this.getDeployedCode();\n    if (code != null) {\n      return this;\n    }\n    // Make sure we can subscribe to a provider event\n    const provider = getProvider(this.runner);\n    assert(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"waitForDeployment\"\n    });\n    return new Promise((resolve, reject) => {\n      const checkCode = async () => {\n        try {\n          const code = await this.getDeployedCode();\n          if (code != null) {\n            return resolve(this);\n          }\n          provider.once(\"block\", checkCode);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      checkCode();\n    });\n  }\n  /**\n   *  Return the transaction used to deploy this contract.\n   *\n   *  This is only available if this instance was returned from a\n   *  [[ContractFactory]].\n   */\n  deploymentTransaction() {\n    return getInternal(this).deployTx;\n  }\n  /**\n   *  Return the function for a given name. This is useful when a contract\n   *  method name conflicts with a JavaScript name such as ``prototype`` or\n   *  when using a Contract programatically.\n   */\n  getFunction(key) {\n    if (typeof key !== \"string\") {\n      key = key.format();\n    }\n    const func = buildWrappedMethod(this, key);\n    return func;\n  }\n  /**\n   *  Return the event for a given name. This is useful when a contract\n   *  event name conflicts with a JavaScript name such as ``prototype`` or\n   *  when using a Contract programatically.\n   */\n  getEvent(key) {\n    if (typeof key !== \"string\") {\n      key = key.format();\n    }\n    return buildWrappedEvent(this, key);\n  }\n  /**\n   *  @_ignore:\n   */\n  async queryTransaction(hash) {\n    throw new Error(\"@TODO\");\n  }\n  /*\n  // @TODO: this is a non-backwards compatible change, but will be added\n  //        in v7 and in a potential SmartContract class in an upcoming\n  //        v6 release\n  async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n      const provider = getProvider(this.runner);\n      assert(provider, \"contract runner does not have a provider\",\n          \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n       const receipt = await provider.getTransactionReceipt(hash);\n      if (receipt == null) { return null; }\n       return new ContractTransactionReceipt(this.interface, provider, receipt);\n  }\n  */\n  /**\n   *  Provide historic access to event data for %%event%% in the range\n   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n   *  inclusive.\n   */\n  async queryFilter(event, fromBlock, toBlock) {\n    if (fromBlock == null) {\n      fromBlock = 0;\n    }\n    if (toBlock == null) {\n      toBlock = \"latest\";\n    }\n    const {\n      addr,\n      addrPromise\n    } = getInternal(this);\n    const address = addr ? addr : await addrPromise;\n    const {\n      fragment,\n      topics\n    } = await getSubInfo(this, event);\n    const filter = {\n      address,\n      topics,\n      fromBlock,\n      toBlock\n    };\n    const provider = getProvider(this.runner);\n    assert(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"queryFilter\"\n    });\n    return (await provider.getLogs(filter)).map(log => {\n      let foundFragment = fragment;\n      if (foundFragment == null) {\n        try {\n          foundFragment = this.interface.getEvent(log.topics[0]);\n        } catch (error) {}\n      }\n      if (foundFragment) {\n        try {\n          return new EventLog(log, this.interface, foundFragment);\n        } catch (error) {\n          return new UndecodedEventLog(log, error);\n        }\n      }\n      return new Log(log, provider);\n    });\n  }\n  /**\n   *  Add an event %%listener%% for the %%event%%.\n   */\n  async on(event, listener) {\n    const sub = await getSub(this, \"on\", event);\n    sub.listeners.push({\n      listener,\n      once: false\n    });\n    sub.start();\n    return this;\n  }\n  /**\n   *  Add an event %%listener%% for the %%event%%, but remove the listener\n   *  after it is fired once.\n   */\n  async once(event, listener) {\n    const sub = await getSub(this, \"once\", event);\n    sub.listeners.push({\n      listener,\n      once: true\n    });\n    sub.start();\n    return this;\n  }\n  /**\n   *  Emit an %%event%% calling all listeners with %%args%%.\n   *\n   *  Resolves to ``true`` if any listeners were called.\n   */\n  async emit(event, ...args) {\n    return await emit(this, event, args, null);\n  }\n  /**\n   *  Resolves to the number of listeners of %%event%% or the total number\n   *  of listeners if unspecified.\n   */\n  async listenerCount(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return 0;\n      }\n      return sub.listeners.length;\n    }\n    const {\n      subs\n    } = getInternal(this);\n    let total = 0;\n    for (const {\n      listeners\n    } of subs.values()) {\n      total += listeners.length;\n    }\n    return total;\n  }\n  /**\n   *  Resolves to the listeners subscribed to %%event%% or all listeners\n   *  if unspecified.\n   */\n  async listeners(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return [];\n      }\n      return sub.listeners.map(({\n        listener\n      }) => listener);\n    }\n    const {\n      subs\n    } = getInternal(this);\n    let result = [];\n    for (const {\n      listeners\n    } of subs.values()) {\n      result = result.concat(listeners.map(({\n        listener\n      }) => listener));\n    }\n    return result;\n  }\n  /**\n   *  Remove the %%listener%% from the listeners for %%event%% or remove\n   *  all listeners if unspecified.\n   */\n  async off(event, listener) {\n    const sub = await hasSub(this, event);\n    if (!sub) {\n      return this;\n    }\n    if (listener) {\n      const index = sub.listeners.map(({\n        listener\n      }) => listener).indexOf(listener);\n      if (index >= 0) {\n        sub.listeners.splice(index, 1);\n      }\n    }\n    if (listener == null || sub.listeners.length === 0) {\n      sub.stop();\n      getInternal(this).subs.delete(sub.tag);\n    }\n    return this;\n  }\n  /**\n   *  Remove all the listeners for %%event%% or remove all listeners if\n   *  unspecified.\n   */\n  async removeAllListeners(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return this;\n      }\n      sub.stop();\n      getInternal(this).subs.delete(sub.tag);\n    } else {\n      const {\n        subs\n      } = getInternal(this);\n      for (const {\n        tag,\n        stop\n      } of subs.values()) {\n        stop();\n        subs.delete(tag);\n      }\n    }\n    return this;\n  }\n  /**\n   *  Alias for [on].\n   */\n  async addListener(event, listener) {\n    return await this.on(event, listener);\n  }\n  /**\n   *  Alias for [off].\n   */\n  async removeListener(event, listener) {\n    return await this.off(event, listener);\n  }\n  /**\n   *  Create a new Class for the %%abi%%.\n   */\n  static buildClass(abi) {\n    class CustomContract extends BaseContract {\n      constructor(address, runner = null) {\n        super(address, abi, runner);\n      }\n    }\n    return CustomContract;\n  }\n  /**\n   *  Create a new BaseContract with a specified Interface.\n   */\n  static from(target, abi, runner) {\n    if (runner == null) {\n      runner = null;\n    }\n    const contract = new this(target, abi, runner);\n    return contract;\n  }\n}\nfunction _ContractBase() {\n  return BaseContract;\n}\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */\nexport class Contract extends _ContractBase() {}","map":{"version":3,"names":["Interface","Typed","isAddressable","resolveAddress","copyRequest","Log","defineProperties","getBigInt","isCallException","isHexString","resolveProperties","isError","makeError","assert","assertArgument","ContractEventPayload","ContractUnknownEventPayload","ContractTransactionResponse","EventLog","UndecodedEventLog","BN_0","BigInt","canCall","value","call","canEstimate","estimateGas","canResolve","resolveName","canSend","sendTransaction","getResolver","provider","undefined","_filter","_classPrivateFieldLooseKey","PreparedTopicFilter","constructor","contract","fragment","args","Object","defineProperty","writable","inputs","length","Error","runner","getRunner","resolver","_classPrivateFieldLooseBase","resolvedArgs","Promise","all","map","param","index","arg","walkAsync","type","Array","isArray","v","interface","encodeFilterTopics","getTopicFilter","feature","getProvider","copyOverrides","allowed","_overrides","dereference","overrides","to","indexOf","data","from","resolveArgs","_runner","buildWrappedFallback","populateTransaction","tx","getAddress","iface","noValue","noData","fallback","payable","receive","staticCall","operation","error","send","method","_contract","buildWrappedMethod","key","getFragment","getFunction","info","pop","assign","encodeFunctionData","result","staticCallResult","decodeFunctionResult","constant","name","getFunctionName","_key","configurable","enumerable","get","buildWrappedEvent","getEvent","getEventName","internal","Symbol","for","internalValues","WeakMap","setInternal","values","set","getInternal","isDeferred","getSubInfo","event","topics","topicHashify","topicHash","e","t","items","Set","toLowerCase","sort","tag","join","hasSub","subs","getSub","addr","sub","address","filter","listener","log","foundFragment","_foundFragment","decodeEventLog","emit","starting","start","push","on","stop","started","off","listeners","lastEmit","resolve","_emit","payloadFunc","count","once","passArgs","delete","resultPromise","passProperties","BaseContract","target","abi","_deployTx","addrPromise","deployTx","Map","then","filters","Proxy","prop","receiver","Reflect","argument","has","hasEvent","String","hasFunction","connect","attach","getDeployedCode","code","getCode","waitForDeployment","deploymentTransaction","wait","reject","checkCode","format","func","queryTransaction","hash","queryFilter","fromBlock","toBlock","getLogs","listenerCount","total","concat","splice","removeAllListeners","addListener","removeListener","buildClass","CustomContract","_ContractBase","Contract"],"sources":["C:\\Users\\DELL\\Desktop\\decentralized-voting-dapp\\src\\node_modules\\ethers\\src.ts\\contract\\contract.ts"],"sourcesContent":["import { Interface, Typed } from \"../abi/index.js\";\nimport { isAddressable, resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log, TransactionResponse } from \"../providers/provider.js\";\nimport {\n    defineProperties, getBigInt, isCallException, isHexString, resolveProperties,\n    isError, makeError, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport {\n    ContractEventPayload, ContractUnknownEventPayload,\n    ContractTransactionResponse,\n    EventLog, UndecodedEventLog\n} from \"./wrappers.js\";\n\nimport type { EventFragment, FunctionFragment, InterfaceAbi, ParamType, Result } from \"../abi/index.js\";\nimport type { Addressable, NameResolver } from \"../address/index.js\";\nimport type { EventEmitterable, Listener } from \"../utils/index.js\";\nimport type {\n    BlockTag, ContractRunner, Provider, TransactionRequest, TopicFilter\n} from \"../providers/index.js\";\n\nimport type {\n    BaseContractMethod,\n    ContractEventName,\n    ContractInterface,\n    ContractMethodArgs,\n    ContractMethod,\n    ContractEventArgs,\n    ContractEvent,\n    ContractTransaction,\n    DeferredTopicFilter,\n    WrappedFallback\n} from \"./types.js\";\n\nconst BN_0 = BigInt(0);\n\ninterface ContractRunnerCaller extends ContractRunner {\n    call: (tx: TransactionRequest) => Promise<string>;\n}\n\ninterface ContractRunnerEstimater extends ContractRunner {\n    estimateGas: (tx: TransactionRequest) => Promise<bigint>;\n}\n\ninterface ContractRunnerSender extends ContractRunner {\n    sendTransaction: (tx: TransactionRequest) => Promise<TransactionResponse>;\n}\n\ninterface ContractRunnerResolver extends ContractRunner {\n    resolveName: (name: string | Addressable) => Promise<null | string>;\n}\n\nfunction canCall(value: any): value is ContractRunnerCaller {\n    return (value && typeof(value.call) === \"function\");\n}\n\nfunction canEstimate(value: any): value is ContractRunnerEstimater {\n    return (value && typeof(value.estimateGas) === \"function\");\n}\n\nfunction canResolve(value: any): value is ContractRunnerResolver {\n    return (value && typeof(value.resolveName) === \"function\");\n}\n\nfunction canSend(value: any): value is ContractRunnerSender {\n    return (value && typeof(value.sendTransaction) === \"function\");\n}\n\nfunction getResolver(value: any): undefined | NameResolver {\n    if (value != null) {\n        if (canResolve(value)) { return value; }\n        if (value.provider) { return value.provider; }\n    }\n    return undefined;\n}\n\nclass PreparedTopicFilter implements DeferredTopicFilter {\n    #filter: Promise<TopicFilter>;\n    readonly fragment!: EventFragment;\n\n    constructor(contract: BaseContract, fragment: EventFragment, args: Array<any>) {\n        defineProperties<PreparedTopicFilter>(this, { fragment });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner: null;\n        this.#filter = (async function() {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n                const arg = args[index];\n                if (arg == null) { return null; }\n\n                return param.walkAsync(args[index], (type, value) => {\n                    if (type === \"address\") {\n                        if (Array.isArray(value)) {\n                            return Promise.all(value.map((v) => resolveAddress(v, resolver)));\n                        }\n                        return resolveAddress(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        })();\n    }\n\n    getTopicFilter(): Promise<TopicFilter> {\n        return this.#filter;\n    }\n}\n\n\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\n\nfunction getRunner<T extends ContractRunner>(value: any, feature: keyof ContractRunner): null | T {\n    if (value == null) { return null; }\n    if (typeof(value[feature]) === \"function\") { return value; }\n    if (value.provider && typeof(value.provider[feature]) === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\n\nfunction getProvider(value: null | ContractRunner): null | Provider {\n    if (value == null) { return null; }\n    return value.provider || null;\n}\n\n/**\n *  @_ignore:\n */\nexport async function copyOverrides<O extends string = \"data\" | \"to\">(arg: any, allowed?: Array<string>): Promise<Omit<ContractTransaction, O>> {\n\n    // Make sure the overrides passed in are a valid overrides object\n    const _overrides = Typed.dereference(arg, \"overrides\");\n    assertArgument(typeof(_overrides) === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = copyRequest(_overrides);\n\n    assertArgument(overrides.to == null || (allowed || [ ]).indexOf(\"to\") >= 0,\n      \"cannot override to\", \"overrides.to\", overrides.to);\n    assertArgument(overrides.data == null || (allowed || [ ]).indexOf(\"data\") >= 0,\n      \"cannot override data\", \"overrides.data\", overrides.data);\n\n    // Resolve any from\n    if (overrides.from) { overrides.from = overrides.from; }\n\n    return <Omit<ContractTransaction, O>>overrides;\n}\n\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner: null | ContractRunner, inputs: ReadonlyArray<ParamType>, args: Array<any>): Promise<Array<any>> {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner: null;\n    return await Promise.all(inputs.map((param, index) => {\n        return param.walkAsync(args[index], (type, value) => {\n            value = Typed.dereference(value, type);\n            if (type === \"address\") { return resolveAddress(value, resolver); }\n            return value;\n        });\n    }));\n}\n\nfunction buildWrappedFallback(contract: BaseContract): WrappedFallback {\n\n    const populateTransaction = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransaction> {\n        // If an overrides was passed in, copy it and normalize the values\n\n        const tx: ContractTransaction = <any>(await copyOverrides<\"data\">(overrides, [ \"data\" ]));\n        tx.to = await contract.getAddress();\n\n        if (tx.from) {\n            tx.from = await resolveAddress(tx.from, getResolver(contract.runner));\n        }\n\n        const iface = contract.interface;\n\n        const noValue = (getBigInt((tx.value || BN_0), \"overrides.value\") === BN_0);\n        const noData = ((tx.data || \"0x\") === \"0x\");\n\n        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n            assertArgument(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n        }\n\n        assertArgument(iface.fallback || noData,\n          \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || (iface.fallback && iface.fallback.payable);\n        assertArgument(payable || noValue,\n          \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n\n        // Only allow fallback contracts to set non-empty data\n        assertArgument(iface.fallback || noData,\n          \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n\n        return tx;\n    }\n\n    const staticCall = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<string> {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await populateTransaction(overrides);\n\n        try {\n            return await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    }\n\n    const send = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransactionResponse> {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await populateTransaction(overrides));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, <Provider>provider, tx);\n    }\n\n    const estimateGas = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<bigint> {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await populateTransaction(overrides));\n    }\n\n    const method = async (overrides?: Omit<TransactionRequest, \"to\">) => {\n        return await send(overrides);\n    };\n\n    defineProperties<any>(method, {\n        _contract: contract,\n\n        estimateGas,\n        populateTransaction,\n        send, staticCall\n    });\n\n    return <WrappedFallback>method;\n}\n\nfunction buildWrappedMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse>(contract: BaseContract, key: string): BaseContractMethod<A, R, D> {\n\n    const getFragment = function(...args: ContractMethodArgs<A>): FunctionFragment {\n        const fragment = contract.interface.getFunction(key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: { key, args }\n        });\n        return fragment;\n    }\n\n    const populateTransaction = async function(...args: ContractMethodArgs<A>): Promise<ContractTransaction> {\n        const fragment = getFragment(...args);\n\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides: Omit<ContractTransaction, \"data\" | \"to\"> = { };\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n\n            if (overrides.from) {\n                overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));\n            }\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n\n        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n\n        return Object.assign({ }, overrides, await resolveProperties({\n            to: contract.getAddress(),\n            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    }\n\n    const staticCall = async function(...args: ContractMethodArgs<A>): Promise<R> {\n        const result = await staticCallResult(...args);\n        if (result.length === 1) { return result[0]; }\n        return <R><unknown>result;\n    }\n\n    const send = async function(...args: ContractMethodArgs<A>): Promise<ContractTransactionResponse> {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await populateTransaction(...args));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, <Provider>provider, tx);\n    }\n\n    const estimateGas = async function(...args: ContractMethodArgs<A>): Promise<bigint> {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await populateTransaction(...args));\n    }\n\n    const staticCallResult = async function(...args: ContractMethodArgs<A>): Promise<Result> {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await populateTransaction(...args);\n\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n\n        const fragment = getFragment(...args);\n        return contract.interface.decodeFunctionResult(fragment, result);\n    };\n\n    const method = async (...args: ContractMethodArgs<A>) => {\n        const fragment = getFragment(...args);\n        if (fragment.constant) { return await staticCall(...args); }\n        return await send(...args);\n    };\n\n    defineProperties<any>(method, {\n        name: contract.interface.getFunctionName(key),\n        _contract: contract, _key: key,\n\n        getFragment,\n\n        estimateGas,\n        populateTransaction,\n        send, staticCall, staticCallResult,\n    });\n\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getFunction(key);\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: { key }\n            });\n            return fragment;\n        }\n    });\n\n    return <BaseContractMethod<A, R, D>>method;\n}\n\nfunction buildWrappedEvent<A extends Array<any> = Array<any>>(contract: BaseContract, key: string): ContractEvent<A> {\n\n    const getFragment = function(...args: ContractEventArgs<A>): EventFragment {\n        const fragment = contract.interface.getEvent(key, args);\n\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: { key, args }\n        });\n\n        return fragment;\n    }\n\n    const method = function(...args: ContractMethodArgs<A>): PreparedTopicFilter {\n        return new PreparedTopicFilter(contract, getFragment(...args), args);\n    };\n\n    defineProperties<any>(method, {\n        name: contract.interface.getEventName(key),\n        _contract: contract, _key: key,\n\n        getFragment\n    });\n\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getEvent(key);\n\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: { key }\n            });\n\n            return fragment;\n        }\n    });\n\n    return <ContractEvent<A>><unknown>method;\n}\n\ntype Sub = {\n    tag: string;\n    listeners: Array<{ listener: Listener, once: boolean }>,\n    start: () => void;\n    stop: () => void;\n};\n\n\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\n\nconst internal = Symbol.for(\"_ethersInternal_contract\");\ntype Internal = {\n    addrPromise: Promise<string>;\n    addr: null | string;\n\n    deployTx: null | ContractTransactionResponse;\n\n    subs: Map<string, Sub>;\n};\n\nconst internalValues: WeakMap<BaseContract, Internal> = new WeakMap();\n\nfunction setInternal(contract: BaseContract, values: Internal): void {\n    internalValues.set(contract[internal], values);\n}\n\nfunction getInternal(contract: BaseContract): Internal {\n    return internalValues.get(contract[internal]) as Internal;\n}\n\nfunction isDeferred(value: any): value is DeferredTopicFilter {\n    return (value && typeof(value) === \"object\" && (\"getTopicFilter\" in value) &&\n      (typeof(value.getTopicFilter) === \"function\") && value.fragment);\n}\n\nasync function getSubInfo(contract: BaseContract, event: ContractEventName): Promise<{ fragment: null | EventFragment, tag: string, topics: TopicFilter }> {\n    let topics: Array<null | string | Array<string>>;\n    let fragment: null | EventFragment = null;\n\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n\n    if (Array.isArray(event)) {\n        const topicHashify = function(name: string): string {\n            if (isHexString(name, 32)) { return name; }\n            const fragment = contract.interface.getEvent(name);\n            assertArgument(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        }\n\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e) => {\n            if (e == null) { return null; }\n            if (Array.isArray(e)) { return e.map(topicHashify); }\n            return topicHashify(e);\n        });\n\n    } else if (event === \"*\") {\n        topics = [ null ];\n\n    } else if (typeof(event) === \"string\") {\n        if (isHexString(event, 32)) {\n            // Topic Hash\n            topics = [ event ];\n        } else {\n           // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            assertArgument(fragment, \"unknown fragment\", \"event\", event);\n            topics = [ fragment.topicHash ];\n        }\n\n    } else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n\n    } else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [ fragment.topicHash ];\n\n    } else {\n        assertArgument(false, \"unknown event name\", \"event\", event);\n    }\n\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t) => {\n        if (t == null) { return null; }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());\n            if (items.length === 1) { return items[0]; }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n\n    const tag = topics.map((t) => {\n        if (t == null) { return \"null\"; }\n        if (Array.isArray(t)) { return t.join(\"|\"); }\n        return t;\n    }).join(\"&\");\n\n    return { fragment, tag, topics }\n}\n\nasync function hasSub(contract: BaseContract, event: ContractEventName): Promise<null | Sub> {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\n\nasync function getSub(contract: BaseContract, operation: string, event: ContractEventName): Promise<Sub> {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    assert(provider, \"contract runner does not support subscribing\",\n        \"UNSUPPORTED_OPERATION\", { operation });\n\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n\n    const { addr, subs } = getInternal(contract);\n\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address: string | Addressable = (addr ? addr: contract);\n        const filter = { address, topics };\n        const listener = (log: Log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            // If fragment is null, we do not deconstruct the args to emit\n\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics): [ ];\n                emit(contract, event, args, (listener: null | Listener) => {\n                    return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            } else {\n                emit(contract, event, [ ], (listener: null | Listener) => {\n                    return new ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n\n        let starting: Array<Promise<any>> = [ ];\n        const start = () => {\n            if (starting.length) { return; }\n            starting.push(provider.on(filter, listener));\n        };\n\n        const stop = async () => {\n            if (starting.length == 0) { return; }\n\n            let started = starting;\n            starting = [ ];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n\n        sub = { tag, listeners: [ ], start, stop };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit: Promise<any> = Promise.resolve();\n\ntype PayloadFunc = (listener: null | Listener) => ContractUnknownEventPayload;\n\nasync function _emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    await lastEmit;\n\n    const sub = await hasSub(contract, event);\n    if (!sub) { return false; }\n\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once }) => {\n        const passArgs = Array.from(args);\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null: listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        } catch (error) { }\n        return !once;\n    });\n\n    if (sub.listeners.length === 0) {\n        sub.stop();\n        getInternal(contract).subs.delete(sub.tag);\n    }\n\n    return (count > 0);\n}\n\nasync function emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    try {\n        await lastEmit;\n    } catch (error) { }\n\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\n\nconst passProperties = [ \"then\" ];\nexport class BaseContract implements Addressable, EventEmitterable<ContractEventName> {\n    /**\n     *  The target to connect to.\n     *\n     *  This can be an address, ENS name or any [[Addressable]], such as\n     *  another contract. To get the resovled address, use the ``getAddress``\n     *  method.\n     */\n    readonly target!: string | Addressable;\n\n    /**\n     *  The contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The connected runner. This is generally a [[Provider]] or a\n     *  [[Signer]], which dictates what operations are supported.\n     *\n     *  For example, a **Contract** connected to a [[Provider]] may\n     *  only execute read-only operations.\n     */\n    readonly runner!: null | ContractRunner;\n\n    /**\n     *  All the Events available on this contract.\n     */\n    readonly filters!: Record<string, ContractEvent>;\n\n    /**\n     *  @_ignore:\n     */\n    readonly [internal]: any;\n\n    /**\n     *  The fallback or receive function if any.\n     */\n    readonly fallback!: null | WrappedFallback;\n\n    /**\n     *  Creates a new contract connected to %%target%% with the %%abi%% and\n     *  optionally connected to a %%runner%% to perform operations on behalf\n     *  of.\n     */\n    constructor(target: string | Addressable, abi: Interface | InterfaceAbi, runner?: null | ContractRunner, _deployTx?: null | TransactionResponse) {\n        assertArgument(typeof(target) === \"string\" || isAddressable(target),\n            \"invalid value for Contract target\", \"target\", target);\n\n        if (runner == null) { runner = null; }\n        const iface = Interface.from(abi);\n        defineProperties<BaseContract>(this, { target, runner, interface: iface });\n\n        Object.defineProperty(this, internal, { value: { } });\n\n        let addrPromise;\n        let addr: null | string = null;\n\n        let deployTx: null | ContractTransactionResponse = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new ContractTransactionResponse(this.interface, <Provider>provider, _deployTx);\n        }\n\n        let subs = new Map();\n\n        // Resolve the target as the address\n        if (typeof(target) === \"string\") {\n            if (isHexString(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n\n            } else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n\n                addrPromise = resolver.resolveName(target).then((addr) => {\n                    if (addr == null) {\n                        throw makeError(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n                            value: target\n                        });\n                    }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        } else {\n            addrPromise = target.getAddress().then((addr) => {\n                if (addr == null) { throw new Error(\"TODO\"); }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n\n        // Set our private values\n        setInternal(this, { addrPromise, addr, deployTx, subs });\n\n        // Add the event filters\n        const filters = new Proxy({ }, {\n            get: (target, prop, receiver) => {\n                // Pass important checks (like `then` for Promise) through\n                if (typeof(prop) === \"symbol\" || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n\n                try {\n                    return this.getEvent(prop);\n                } catch (error) {\n                    if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n\n                return undefined;\n            },\n            has: (target, prop) => {\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(<string>prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n\n                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n            }\n        });\n        defineProperties<BaseContract>(this, { filters });\n\n        defineProperties<BaseContract>(this, {\n            fallback: ((iface.receive || iface.fallback) ? (buildWrappedFallback(this)): null)\n        });\n\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof(prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n\n                // Undefined properties should return undefined\n                try {\n                    return target.getFunction(prop);\n                } catch (error) {\n                    if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n\n                return undefined;\n            },\n            has: (target, prop) => {\n                if (typeof(prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n\n                return target.interface.hasFunction(prop);\n            }\n        });\n\n    }\n\n    /**\n     *  Return a new Contract instance with the same target and ABI, but\n     *  a different %%runner%%.\n     */\n    connect(runner: null | ContractRunner): BaseContract {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n\n    /**\n     *  Return a new Contract instance with the same ABI and runner, but\n     *  a different %%target%%.\n     */\n    attach(target: string | Addressable): BaseContract {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n\n    /**\n     *  Return the resolved address of this Contract.\n     */\n    async getAddress(): Promise<string> { return await getInternal(this).addrPromise; }\n\n    /**\n     *  Return the deployed bytecode or null if no bytecode is found.\n     */\n    async getDeployedCode(): Promise<null | string> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\n\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") { return null; }\n        return code;\n    }\n\n    /**\n     *  Resolve to this Contract once the bytecode has been deployed, or\n     *  resolve immediately if already deployed.\n     */\n    async waitForDeployment(): Promise<this> {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) { return this; }\n\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        assert(provider != null, \"contract runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\n\n        return new Promise((resolve, reject) => {\n            const checkCode = async () => {\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) { return resolve(this); }\n                    provider.once(\"block\", checkCode);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n\n    /**\n     *  Return the transaction used to deploy this contract.\n     *\n     *  This is only available if this instance was returned from a\n     *  [[ContractFactory]].\n     */\n    deploymentTransaction(): null | ContractTransactionResponse {\n        return getInternal(this).deployTx;\n    }\n\n    /**\n     *  Return the function for a given name. This is useful when a contract\n     *  method name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        const func = buildWrappedMethod(this, key);\n        return <T>func;\n    }\n\n    /**\n     *  Return the event for a given name. This is useful when a contract\n     *  event name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getEvent(key: string | EventFragment): ContractEvent {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        return buildWrappedEvent(this, key);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    async queryTransaction(hash: string): Promise<Array<EventLog>> {\n        throw new Error(\"@TODO\");\n    }\n\n    /*\n    // @TODO: this is a non-backwards compatible change, but will be added\n    //        in v7 and in a potential SmartContract class in an upcoming\n    //        v6 release\n    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n\n        const receipt = await provider.getTransactionReceipt(hash);\n        if (receipt == null) { return null; }\n\n        return new ContractTransactionReceipt(this.interface, provider, receipt);\n    }\n    */\n\n    /**\n     *  Provide historic access to event data for %%event%% in the range\n     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n     *  inclusive.\n     */\n    async queryFilter(event: ContractEventName, fromBlock?: BlockTag, toBlock?: BlockTag): Promise<Array<EventLog | Log>> {\n        if (fromBlock == null) { fromBlock = 0; }\n        if (toBlock == null) { toBlock = \"latest\"; }\n        const { addr, addrPromise } = getInternal(this);\n        const address = (addr ? addr: (await addrPromise));\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = { address, topics, fromBlock, toBlock };\n\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\n\n        return (await provider.getLogs(filter)).map((log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            if (foundFragment) {\n                try {\n                    return new EventLog(log, this.interface, foundFragment);\n                } catch (error: any) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n\n            return new Log(log, provider);\n        });\n    }\n\n    /**\n     *  Add an event %%listener%% for the %%event%%.\n     */\n    async on(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({ listener, once: false });\n        sub.start();\n        return this;\n    }\n\n    /**\n     *  Add an event %%listener%% for the %%event%%, but remove the listener\n     *  after it is fired once.\n     */\n    async once(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({ listener, once: true });\n        sub.start();\n        return this;\n    }\n\n    /**\n     *  Emit an %%event%% calling all listeners with %%args%%.\n     *\n     *  Resolves to ``true`` if any listeners were called.\n     */\n    async emit(event: ContractEventName, ...args: Array<any>): Promise<boolean> {\n        return await emit(this, event, args, null);\n    }\n\n    /**\n     *  Resolves to the number of listeners of %%event%% or the total number\n     *  of listeners if unspecified.\n     */\n    async listenerCount(event?: ContractEventName): Promise<number> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        const { subs } = getInternal(this);\n\n        let total = 0;\n        for (const { listeners } of subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    /**\n     *  Resolves to the listeners subscribed to %%event%% or all listeners\n     *  if unspecified.\n     */\n    async listeners(event?: ContractEventName): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n\n        const { subs } = getInternal(this);\n\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    /**\n     *  Remove the %%listener%% from the listeners for %%event%% or remove\n     *  all listeners if unspecified.\n     */\n    async off(event: ContractEventName, listener?: Listener): Promise<this> {\n        const sub = await hasSub(this, event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    /**\n     *  Remove all the listeners for %%event%% or remove all listeners if\n     *  unspecified.\n     */\n    async removeAllListeners(event?: ContractEventName): Promise<this> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return this; }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        } else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()) {\n                stop();\n                subs.delete(tag);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     *  Alias for [on].\n     */\n    async addListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.on(event, listener);\n    }\n\n    /**\n     *  Alias for [off].\n     */\n    async removeListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.off(event, listener);\n    }\n\n    /**\n     *  Create a new Class for the %%abi%%.\n     */\n    static buildClass<T = ContractInterface>(abi: Interface | InterfaceAbi): new (target: string, runner?: null | ContractRunner) => BaseContract & Omit<T, keyof BaseContract> {\n        class CustomContract extends BaseContract {\n            constructor(address: string, runner: null | ContractRunner = null) {\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract as any;\n    };\n\n    /**\n     *  Create a new BaseContract with a specified Interface.\n     */\n    static from<T = ContractInterface>(target: string, abi: Interface | InterfaceAbi, runner?: null | ContractRunner): BaseContract & Omit<T, keyof BaseContract> {\n        if (runner == null) { runner = null; }\n        const contract = new this(target, abi, runner );\n        return contract as any;\n    }\n}\n\nfunction _ContractBase(): new (target: string | Addressable, abi: Interface | InterfaceAbi, runner?: null | ContractRunner) => BaseContract & Omit<ContractInterface, keyof BaseContract> {\n    return BaseContract as any;\n}\n\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */\nexport class Contract extends _ContractBase() { }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}