{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nvar _noncePromise = /*#__PURE__*/_classPrivateFieldLooseKey(\"noncePromise\");\nvar _delta = /*#__PURE__*/_classPrivateFieldLooseKey(\"delta\");\nexport class NonceManager extends AbstractSigner {\n  /**\n   *  Creates a new **NonceManager** to manage %%signer%%.\n   */\n  constructor(signer) {\n    super(signer.provider);\n    /**\n     *  The Signer being managed.\n     */\n    Object.defineProperty(this, _noncePromise, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _delta, {\n      writable: true,\n      value: void 0\n    });\n    defineProperties(this, {\n      signer\n    });\n    _classPrivateFieldLooseBase(this, _noncePromise)[_noncePromise] = null;\n    _classPrivateFieldLooseBase(this, _delta)[_delta] = 0;\n  }\n  async getAddress() {\n    return this.signer.getAddress();\n  }\n  connect(provider) {\n    return new NonceManager(this.signer.connect(provider));\n  }\n  async getNonce(blockTag) {\n    if (blockTag === \"pending\") {\n      if (_classPrivateFieldLooseBase(this, _noncePromise)[_noncePromise] == null) {\n        _classPrivateFieldLooseBase(this, _noncePromise)[_noncePromise] = super.getNonce(\"pending\");\n      }\n      const delta = _classPrivateFieldLooseBase(this, _delta)[_delta];\n      return (await _classPrivateFieldLooseBase(this, _noncePromise)[_noncePromise]) + delta;\n    }\n    return super.getNonce(blockTag);\n  }\n  /**\n   *  Manually increment the nonce. This may be useful when managng\n   *  offline transactions.\n   */\n  increment() {\n    _classPrivateFieldLooseBase(this, _delta)[_delta]++;\n  }\n  /**\n   *  Resets the nonce, causing the **NonceManager** to reload the current\n   *  nonce from the blockchain on the next transaction.\n   */\n  reset() {\n    _classPrivateFieldLooseBase(this, _delta)[_delta] = 0;\n    _classPrivateFieldLooseBase(this, _noncePromise)[_noncePromise] = null;\n  }\n  async sendTransaction(tx) {\n    const noncePromise = this.getNonce(\"pending\");\n    this.increment();\n    tx = await this.signer.populateTransaction(tx);\n    tx.nonce = await noncePromise;\n    // @TODO: Maybe handle interesting/recoverable errors?\n    // Like don't increment if the tx was certainly not sent\n    return await this.signer.sendTransaction(tx);\n  }\n  signTransaction(tx) {\n    return this.signer.signTransaction(tx);\n  }\n  signMessage(message) {\n    return this.signer.signMessage(message);\n  }\n  signTypedData(domain, types, value) {\n    return this.signer.signTypedData(domain, types, value);\n  }\n}","map":{"version":3,"names":["defineProperties","AbstractSigner","_noncePromise","_classPrivateFieldLooseKey","_delta","NonceManager","constructor","signer","provider","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","getAddress","connect","getNonce","blockTag","delta","increment","reset","sendTransaction","tx","noncePromise","populateTransaction","nonce","signTransaction","signMessage","message","signTypedData","domain","types"],"sources":["C:\\Users\\DELL\\Desktop\\decentralized-voting-dapp\\src\\node_modules\\ethers\\src.ts\\providers\\signer-noncemanager.ts"],"sourcesContent":["import { defineProperties } from \"../utils/index.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nexport class NonceManager extends AbstractSigner {\n    /**\n     *  The Signer being managed.\n     */\n    signer!: Signer;\n\n    #noncePromise: null | Promise<number>;\n    #delta: number;\n\n    /**\n     *  Creates a new **NonceManager** to manage %%signer%%.\n     */\n    constructor(signer: Signer) {\n        super(signer.provider);\n        defineProperties<NonceManager>(this, { signer });\n\n        this.#noncePromise = null;\n        this.#delta = 0;\n    }\n\n    async getAddress(): Promise<string> {\n        return this.signer.getAddress();\n    }\n\n    connect(provider: null | Provider): NonceManager {\n        return new NonceManager(this.signer.connect(provider));\n    }\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        if (blockTag === \"pending\") {\n            if (this.#noncePromise == null) {\n                this.#noncePromise = super.getNonce(\"pending\");\n            }\n\n            const delta = this.#delta;\n            return (await this.#noncePromise) + delta;\n        }\n\n        return super.getNonce(blockTag);\n    }\n\n    /**\n     *  Manually increment the nonce. This may be useful when managng\n     *  offline transactions.\n     */\n    increment(): void {\n        this.#delta++;\n    }\n\n    /**\n     *  Resets the nonce, causing the **NonceManager** to reload the current\n     *  nonce from the blockchain on the next transaction.\n     */\n    reset(): void {\n        this.#delta = 0;\n        this.#noncePromise = null;\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const noncePromise = this.getNonce(\"pending\");\n        this.increment();\n\n        tx = await this.signer.populateTransaction(tx);\n        tx.nonce = await noncePromise;\n\n        // @TODO: Maybe handle interesting/recoverable errors?\n        // Like don't increment if the tx was certainly not sent\n        return await this.signer.sendTransaction(tx);\n    }\n\n    signTransaction(tx: TransactionRequest): Promise<string> {\n        return this.signer.signTransaction(tx);\n    }\n\n    signMessage(message: string | Uint8Array): Promise<string> {\n        return this.signer.signMessage(message);\n    }\n\n    signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this.signer.signTypedData(domain, types, value);\n    }\n}\n"],"mappings":";;AAAA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,cAAc,QAAQ,sBAAsB;AAUrD;;;;;AAAA,IAAAC,aAAA,gBAAAC,0BAAA;AAAA,IAAAC,MAAA,gBAAAD,0BAAA;AAKA,OAAM,MAAOE,YAAa,SAAQJ,cAAc;EAS5C;;;EAGAK,YAAYC,MAAc;IACtB,KAAK,CAACA,MAAM,CAACC,QAAQ,CAAC;IAZ1B;;;IAAAC,MAAA,CAAAC,cAAA,OAAAR,aAAA;MAAAS,QAAA;MAAAC,KAAA;IAAA;IAAAH,MAAA,CAAAC,cAAA,OAAAN,MAAA;MAAAO,QAAA;MAAAC,KAAA;IAAA;IAaIZ,gBAAgB,CAAe,IAAI,EAAE;MAAEO;IAAM,CAAE,CAAC;IAEhDM,2BAAA,KAAI,EAAAX,aAAA,EAAAA,aAAA,IAAiB,IAAI;IACzBW,2BAAA,KAAI,EAAAT,MAAA,EAAAA,MAAA,IAAU,CAAC;EACnB;EAEA,MAAMU,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACP,MAAM,CAACO,UAAU,EAAE;EACnC;EAEAC,OAAOA,CAACP,QAAyB;IAC7B,OAAO,IAAIH,YAAY,CAAC,IAAI,CAACE,MAAM,CAACQ,OAAO,CAACP,QAAQ,CAAC,CAAC;EAC1D;EAEA,MAAMQ,QAAQA,CAACC,QAAmB;IAC9B,IAAIA,QAAQ,KAAK,SAAS,EAAE;MACxB,IAAIJ,2BAAA,KAAI,EAAAX,aAAA,EAAAA,aAAA,KAAkB,IAAI,EAAE;QAC5BW,2BAAA,KAAI,EAAAX,aAAA,EAAAA,aAAA,IAAiB,KAAK,CAACc,QAAQ,CAAC,SAAS,CAAC;;MAGlD,MAAME,KAAK,GAAAL,2BAAA,CAAG,IAAI,EAAAT,MAAA,EAAAA,MAAA,CAAO;MACzB,OAAO,CAAC,MAAAS,2BAAA,CAAM,IAAI,EAAAX,aAAA,EAAAA,aAAA,CAAc,IAAIgB,KAAK;;IAG7C,OAAO,KAAK,CAACF,QAAQ,CAACC,QAAQ,CAAC;EACnC;EAEA;;;;EAIAE,SAASA,CAAA;IACLN,2BAAA,KAAI,EAAAT,MAAA,EAAAA,MAAA,GAAS;EACjB;EAEA;;;;EAIAgB,KAAKA,CAAA;IACDP,2BAAA,KAAI,EAAAT,MAAA,EAAAA,MAAA,IAAU,CAAC;IACfS,2BAAA,KAAI,EAAAX,aAAA,EAAAA,aAAA,IAAiB,IAAI;EAC7B;EAEA,MAAMmB,eAAeA,CAACC,EAAsB;IACxC,MAAMC,YAAY,GAAG,IAAI,CAACP,QAAQ,CAAC,SAAS,CAAC;IAC7C,IAAI,CAACG,SAAS,EAAE;IAEhBG,EAAE,GAAG,MAAM,IAAI,CAACf,MAAM,CAACiB,mBAAmB,CAACF,EAAE,CAAC;IAC9CA,EAAE,CAACG,KAAK,GAAG,MAAMF,YAAY;IAE7B;IACA;IACA,OAAO,MAAM,IAAI,CAAChB,MAAM,CAACc,eAAe,CAACC,EAAE,CAAC;EAChD;EAEAI,eAAeA,CAACJ,EAAsB;IAClC,OAAO,IAAI,CAACf,MAAM,CAACmB,eAAe,CAACJ,EAAE,CAAC;EAC1C;EAEAK,WAAWA,CAACC,OAA4B;IACpC,OAAO,IAAI,CAACrB,MAAM,CAACoB,WAAW,CAACC,OAAO,CAAC;EAC3C;EAEAC,aAAaA,CAACC,MAAuB,EAAEC,KAA4C,EAAEnB,KAA0B;IAC3G,OAAO,IAAI,CAACL,MAAM,CAACsB,aAAa,CAACC,MAAM,EAAEC,KAAK,EAAEnB,KAAK,CAAC;EAC1D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}