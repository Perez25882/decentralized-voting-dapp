{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\decentralized-voting-dapp\\\\src\\\\context\\\\VotingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport toast from \"react-hot-toast\";\nimport VotingSystemABI from \"../contracts/VotingSystem.json\";\n\n// Import deployment info with error handling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet deploymentInfo;\ntry {\n  deploymentInfo = require(\"../contracts/deployment.json\");\n} catch (error) {\n  console.error(\"Deployment file not found. Please deploy the contract first.\");\n  deploymentInfo = {\n    contractAddress: process.env.REACT_APP_CONTRACT_ADDRESS || \"0x0000000000000000000000000000000000000000\",\n    electoralCommission: \"0x0000000000000000000000000000000000000000\",\n    network: process.env.REACT_APP_NETWORK_NAME || \"localhost\",\n    chainId: Number.parseInt(process.env.REACT_APP_NETWORK_ID) || 1337\n  };\n}\nconst VotingContext = /*#__PURE__*/createContext();\nconst initialState = {\n  account: null,\n  contract: null,\n  provider: null,\n  signer: null,\n  isConnected: false,\n  isLoading: false,\n  voter: null,\n  currentElection: null,\n  candidates: [],\n  allElections: [],\n  isAdmin: false,\n  error: null,\n  chainId: null\n};\nfunction votingReducer(state, action) {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case \"SET_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload\n      };\n    case \"SET_CONNECTION\":\n      return {\n        ...state,\n        provider: action.payload.provider,\n        signer: action.payload.signer,\n        contract: action.payload.contract,\n        isConnected: true,\n        chainId: action.payload.chainId\n      };\n    case \"SET_VOTER\":\n      return {\n        ...state,\n        voter: action.payload\n      };\n    case \"SET_CURRENT_ELECTION\":\n      return {\n        ...state,\n        currentElection: action.payload\n      };\n    case \"SET_ALL_ELECTIONS\":\n      return {\n        ...state,\n        allElections: action.payload\n      };\n    case \"SET_CANDIDATES\":\n      return {\n        ...state,\n        candidates: action.payload\n      };\n    case \"SET_IS_ADMIN\":\n      return {\n        ...state,\n        isAdmin: action.payload\n      };\n    case \"SET_ERROR\":\n      return {\n        ...state,\n        error: action.payload\n      };\n    case \"DISCONNECT\":\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n}\nexport function VotingProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(votingReducer, initialState);\n\n  // Network configurations\n  const SUPPORTED_NETWORKS = {\n    1337: {\n      name: \"Hardhat Local\",\n      rpcUrl: \"http://127.0.0.1:8545\"\n    },\n    11155111: {\n      name: \"Sepolia Testnet\",\n      rpcUrl: \"https://sepolia.infura.io/v3/...\"\n    }\n  };\n\n  // Get expected network from deployment info or environment\n  const expectedChainId = deploymentInfo.chainId || Number.parseInt(process.env.REACT_APP_NETWORK_ID) || 11155111;\n\n  // Robust voter ID validation function\n  const validateVoterId = async voterId => {\n    if (!voterId || !state.contract) {\n      return {\n        isValid: false,\n        isAvailable: false,\n        message: \"Invalid input\"\n      };\n    }\n    try {\n      const result = await state.contract.checkVoterIdAvailability(voterId);\n      return {\n        isValid: result.isValid,\n        isAvailable: result.isAvailable,\n        message: result.message\n      };\n    } catch (error) {\n      console.error(\"Validation error:\", error);\n      return {\n        isValid: false,\n        isAvailable: false,\n        message: \"Unable to validate voter ID at this time\"\n      };\n    }\n  };\n\n  // Initialize Web3 connection\n  const connectWallet = async () => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed\");\n      }\n\n      // Check if contract is deployed\n      const contractAddress = deploymentInfo.contractAddress || process.env.REACT_APP_CONTRACT_ADDRESS;\n      if (!contractAddress || contractAddress === \"0x0000000000000000000000000000000000000000\") {\n        throw new Error(\"Contract not deployed. Please deploy the contract first.\");\n      }\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // Get network info\n      const chainId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      const chainIdNumber = Number.parseInt(chainId, 16);\n      console.log(\"Connected to chain:\", chainIdNumber);\n      console.log(\"Expected chain:\", expectedChainId);\n\n      // Check if on correct network\n      if (chainIdNumber !== expectedChainId) {\n        var _SUPPORTED_NETWORKS$e;\n        const networkName = ((_SUPPORTED_NETWORKS$e = SUPPORTED_NETWORKS[expectedChainId]) === null || _SUPPORTED_NETWORKS$e === void 0 ? void 0 : _SUPPORTED_NETWORKS$e.name) || `Chain ID ${expectedChainId}`;\n        throw new Error(`Please switch to ${networkName}. Current network: ${chainIdNumber}`);\n      }\n\n      // Create provider and signer\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      // Test connection to contract\n      const contract = new ethers.Contract(contractAddress, VotingSystemABI.abi, signer);\n\n      // Test contract call\n      try {\n        await contract.electoralCommission();\n      } catch (error) {\n        throw new Error(\"Cannot connect to contract. Make sure the contract is deployed on this network.\");\n      }\n      dispatch({\n        type: \"SET_CONNECTION\",\n        payload: {\n          provider,\n          signer,\n          contract,\n          chainId: chainIdNumber\n        }\n      });\n      dispatch({\n        type: \"SET_ACCOUNT\",\n        payload: accounts[0]\n      });\n\n      // Check if user is admin\n      const electoralCommission = await contract.electoralCommission();\n      const isAdmin = accounts[0].toLowerCase() === electoralCommission.toLowerCase();\n      dispatch({\n        type: \"SET_IS_ADMIN\",\n        payload: isAdmin\n      });\n\n      // Load voter data if not admin\n      if (!isAdmin) {\n        await loadVoterData(contract, accounts[0]);\n      }\n\n      // Load current election and all elections\n      await loadCurrentElection(contract);\n      await loadAllElections(contract);\n      toast.success(\"Wallet connected successfully!\");\n    } catch (error) {\n      console.error(\"Connection error:\", error);\n      dispatch({\n        type: \"SET_ERROR\",\n        payload: error.message\n      });\n      toast.error(error.message);\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Load voter data\n  const loadVoterData = async (contract, account) => {\n    try {\n      const voter = await contract.getVoter(account);\n      if (voter.walletAddress !== \"0x0000000000000000000000000000000000000000\") {\n        dispatch({\n          type: \"SET_VOTER\",\n          payload: voter\n        });\n      }\n    } catch (error) {\n      console.error(\"Error loading voter data:\", error);\n    }\n  };\n\n  // Load current election\n  const loadCurrentElection = async contract => {\n    try {\n      const election = await contract.getCurrentElection();\n      console.log(\"Current election loaded:\", election);\n      if (election.id > 0) {\n        dispatch({\n          type: \"SET_CURRENT_ELECTION\",\n          payload: election\n        });\n        await loadCandidates(contract, election.id);\n      } else {\n        dispatch({\n          type: \"SET_CURRENT_ELECTION\",\n          payload: null\n        });\n        dispatch({\n          type: \"SET_CANDIDATES\",\n          payload: []\n        });\n      }\n    } catch (error) {\n      console.error(\"Error loading current election:\", error);\n    }\n  };\n\n  // Load all elections\n  const loadAllElections = async contract => {\n    try {\n      const electionCounter = await contract.electionCounter();\n      const elections = [];\n      for (let i = 1; i <= electionCounter; i++) {\n        try {\n          const election = await contract.getElection(i);\n          if (election.id > 0) {\n            elections.push(election);\n          }\n        } catch (error) {\n          console.error(`Error loading election ${i}:`, error);\n        }\n      }\n      console.log(\"All elections loaded:\", elections);\n      dispatch({\n        type: \"SET_ALL_ELECTIONS\",\n        payload: elections\n      });\n    } catch (error) {\n      console.error(\"Error loading all elections:\", error);\n    }\n  };\n\n  // Load candidates for current election\n  const loadCandidates = async (contract, electionId) => {\n    try {\n      const candidates = await contract.getElectionResults(electionId);\n      dispatch({\n        type: \"SET_CANDIDATES\",\n        payload: candidates\n      });\n    } catch (error) {\n      console.error(\"Error loading candidates:\", error);\n    }\n  };\n\n  // Register voter\n  const registerVoter = async voterData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n\n      // Validate voter ID before submitting\n      const validation = await validateVoterId(voterData.voterId);\n      if (!validation.isValid || !validation.isAvailable) {\n        toast.error(validation.message);\n        return false;\n      }\n      const tx = await state.contract.requestRegistration(voterData.voterId, voterData.name, voterData.nationalId, voterData.email);\n      await tx.wait();\n      toast.success(\"Registration request submitted successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      toast.error(error.reason || \"Registration failed. Please try again.\");\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Cast vote\n  const castVote = async candidateId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.vote(candidateId);\n      await tx.wait();\n\n      // Reload voter data and candidates\n      await loadVoterData(state.contract, state.account);\n      await loadCandidates(state.contract, state.currentElection.id);\n      toast.success(\"Vote cast successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Voting error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Admin functions\n  const verifyVoter = async requestId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.verifyVoter(requestId);\n      await tx.wait();\n      toast.success(\"Voter verified successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Verification error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const addCandidate = async candidateData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.addCandidate(candidateData.name, candidateData.party, candidateData.imageUrl || \"\");\n      await tx.wait();\n      toast.success(\"Candidate added successfully!\");\n      await loadAllElections(state.contract);\n      return true;\n    } catch (error) {\n      console.error(\"Add candidate error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const createElection = async electionData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.createElection(electionData.title, electionData.description, electionData.candidateIds);\n      await tx.wait();\n      await loadAllElections(state.contract);\n      await loadCurrentElection(state.contract);\n      toast.success(\"Election created successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Create election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const startElection = async (electionId, duration) => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.startElection(electionId, duration);\n      await tx.wait();\n      await loadCurrentElection(state.contract);\n      await loadAllElections(state.contract);\n      toast.success(\"Election started successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Start election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const endElection = async electionId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.endElection(electionId);\n      await tx.wait();\n      await loadCurrentElection(state.contract);\n      await loadAllElections(state.contract);\n      toast.success(\"Election ended successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"End election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Auto-connect on page load\n  useEffect(() => {\n    const autoConnect = async () => {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n          });\n          if (accounts.length > 0) {\n            await connectWallet();\n          }\n        } catch (error) {\n          console.error(\"Auto-connect error:\", error);\n        }\n      }\n    };\n    autoConnect();\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length === 0) {\n          dispatch({\n            type: \"DISCONNECT\"\n          });\n        } else {\n          connectWallet();\n        }\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners(\"accountsChanged\");\n        window.ethereum.removeAllListeners(\"chainChanged\");\n      }\n    };\n  }, []);\n  const value = {\n    ...state,\n    connectWallet,\n    registerVoter,\n    castVote,\n    verifyVoter,\n    addCandidate,\n    createElection,\n    startElection,\n    endElection,\n    validateVoterId,\n    loadCurrentElection: () => loadCurrentElection(state.contract),\n    loadAllElections: () => loadAllElections(state.contract),\n    loadCandidates: electionId => loadCandidates(state.contract, electionId)\n  };\n  return /*#__PURE__*/_jsxDEV(VotingContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 472,\n    columnNumber: 10\n  }, this);\n}\n_s(VotingProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = VotingProvider;\nexport function useVoting() {\n  _s2();\n  const context = useContext(VotingContext);\n  if (!context) {\n    throw new Error(\"useVoting must be used within a VotingProvider\");\n  }\n  return context;\n}\n_s2(useVoting, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"VotingProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useReducer","useEffect","ethers","toast","VotingSystemABI","jsxDEV","_jsxDEV","deploymentInfo","require","error","console","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","electoralCommission","network","REACT_APP_NETWORK_NAME","chainId","Number","parseInt","REACT_APP_NETWORK_ID","VotingContext","initialState","account","contract","provider","signer","isConnected","isLoading","voter","currentElection","candidates","allElections","isAdmin","votingReducer","state","action","type","payload","VotingProvider","children","dispatch","SUPPORTED_NETWORKS","name","rpcUrl","expectedChainId","validateVoterId","voterId","isValid","isAvailable","message","result","checkVoterIdAvailability","connectWallet","window","ethereum","Error","accounts","request","method","chainIdNumber","log","_SUPPORTED_NETWORKS$e","networkName","BrowserProvider","getSigner","Contract","abi","toLowerCase","loadVoterData","loadCurrentElection","loadAllElections","success","getVoter","walletAddress","election","getCurrentElection","id","loadCandidates","electionCounter","elections","i","getElection","push","electionId","getElectionResults","registerVoter","voterData","validation","tx","requestRegistration","nationalId","email","wait","reason","castVote","candidateId","vote","verifyVoter","requestId","addCandidate","candidateData","party","imageUrl","createElection","electionData","title","description","candidateIds","startElection","duration","endElection","autoConnect","length","on","location","reload","removeAllListeners","value","Provider","fileName","lineNumber","columnNumber","_c","useVoting","context","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/decentralized-voting-dapp/src/context/VotingContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useReducer, useEffect } from \"react\"\nimport { ethers } from \"ethers\"\nimport toast from \"react-hot-toast\"\nimport VotingSystemABI from \"../contracts/VotingSystem.json\"\n\n// Import deployment info with error handling\nlet deploymentInfo\ntry {\n  deploymentInfo = require(\"../contracts/deployment.json\")\n} catch (error) {\n  console.error(\"Deployment file not found. Please deploy the contract first.\")\n  deploymentInfo = {\n    contractAddress: process.env.REACT_APP_CONTRACT_ADDRESS || \"0x0000000000000000000000000000000000000000\",\n    electoralCommission: \"0x0000000000000000000000000000000000000000\",\n    network: process.env.REACT_APP_NETWORK_NAME || \"localhost\",\n    chainId: Number.parseInt(process.env.REACT_APP_NETWORK_ID) || 1337,\n  }\n}\n\nconst VotingContext = createContext()\n\nconst initialState = {\n  account: null,\n  contract: null,\n  provider: null,\n  signer: null,\n  isConnected: false,\n  isLoading: false,\n  voter: null,\n  currentElection: null,\n  candidates: [],\n  allElections: [],\n  isAdmin: false,\n  error: null,\n  chainId: null,\n}\n\nfunction votingReducer(state, action) {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return { ...state, isLoading: action.payload }\n    case \"SET_ACCOUNT\":\n      return { ...state, account: action.payload }\n    case \"SET_CONNECTION\":\n      return {\n        ...state,\n        provider: action.payload.provider,\n        signer: action.payload.signer,\n        contract: action.payload.contract,\n        isConnected: true,\n        chainId: action.payload.chainId,\n      }\n    case \"SET_VOTER\":\n      return { ...state, voter: action.payload }\n    case \"SET_CURRENT_ELECTION\":\n      return { ...state, currentElection: action.payload }\n    case \"SET_ALL_ELECTIONS\":\n      return { ...state, allElections: action.payload }\n    case \"SET_CANDIDATES\":\n      return { ...state, candidates: action.payload }\n    case \"SET_IS_ADMIN\":\n      return { ...state, isAdmin: action.payload }\n    case \"SET_ERROR\":\n      return { ...state, error: action.payload }\n    case \"DISCONNECT\":\n      return { ...initialState }\n    default:\n      return state\n  }\n}\n\nexport function VotingProvider({ children }) {\n  const [state, dispatch] = useReducer(votingReducer, initialState)\n\n  // Network configurations\n  const SUPPORTED_NETWORKS = {\n    1337: { name: \"Hardhat Local\", rpcUrl: \"http://127.0.0.1:8545\" },\n    11155111: { name: \"Sepolia Testnet\", rpcUrl: \"https://sepolia.infura.io/v3/...\" },\n  }\n\n  // Get expected network from deployment info or environment\n  const expectedChainId = deploymentInfo.chainId || Number.parseInt(process.env.REACT_APP_NETWORK_ID) || 11155111\n\n  // Robust voter ID validation function\n  const validateVoterId = async (voterId) => {\n    if (!voterId || !state.contract) {\n      return { isValid: false, isAvailable: false, message: \"Invalid input\" }\n    }\n\n    try {\n      const result = await state.contract.checkVoterIdAvailability(voterId)\n      return {\n        isValid: result.isValid,\n        isAvailable: result.isAvailable,\n        message: result.message,\n      }\n    } catch (error) {\n      console.error(\"Validation error:\", error)\n      return {\n        isValid: false,\n        isAvailable: false,\n        message: \"Unable to validate voter ID at this time\",\n      }\n    }\n  }\n\n  // Initialize Web3 connection\n  const connectWallet = async () => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed\")\n      }\n\n      // Check if contract is deployed\n      const contractAddress = deploymentInfo.contractAddress || process.env.REACT_APP_CONTRACT_ADDRESS\n      if (!contractAddress || contractAddress === \"0x0000000000000000000000000000000000000000\") {\n        throw new Error(\"Contract not deployed. Please deploy the contract first.\")\n      }\n\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n\n      // Get network info\n      const chainId = await window.ethereum.request({ method: \"eth_chainId\" })\n      const chainIdNumber = Number.parseInt(chainId, 16)\n\n      console.log(\"Connected to chain:\", chainIdNumber)\n      console.log(\"Expected chain:\", expectedChainId)\n\n      // Check if on correct network\n      if (chainIdNumber !== expectedChainId) {\n        const networkName = SUPPORTED_NETWORKS[expectedChainId]?.name || `Chain ID ${expectedChainId}`\n        throw new Error(`Please switch to ${networkName}. Current network: ${chainIdNumber}`)\n      }\n\n      // Create provider and signer\n      const provider = new ethers.BrowserProvider(window.ethereum)\n      const signer = await provider.getSigner()\n\n      // Test connection to contract\n      const contract = new ethers.Contract(contractAddress, VotingSystemABI.abi, signer)\n\n      // Test contract call\n      try {\n        await contract.electoralCommission()\n      } catch (error) {\n        throw new Error(\"Cannot connect to contract. Make sure the contract is deployed on this network.\")\n      }\n\n      dispatch({\n        type: \"SET_CONNECTION\",\n        payload: { provider, signer, contract, chainId: chainIdNumber },\n      })\n\n      dispatch({ type: \"SET_ACCOUNT\", payload: accounts[0] })\n\n      // Check if user is admin\n      const electoralCommission = await contract.electoralCommission()\n      const isAdmin = accounts[0].toLowerCase() === electoralCommission.toLowerCase()\n      dispatch({ type: \"SET_IS_ADMIN\", payload: isAdmin })\n\n      // Load voter data if not admin\n      if (!isAdmin) {\n        await loadVoterData(contract, accounts[0])\n      }\n\n      // Load current election and all elections\n      await loadCurrentElection(contract)\n      await loadAllElections(contract)\n\n      toast.success(\"Wallet connected successfully!\")\n    } catch (error) {\n      console.error(\"Connection error:\", error)\n      dispatch({ type: \"SET_ERROR\", payload: error.message })\n      toast.error(error.message)\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Load voter data\n  const loadVoterData = async (contract, account) => {\n    try {\n      const voter = await contract.getVoter(account)\n      if (voter.walletAddress !== \"0x0000000000000000000000000000000000000000\") {\n        dispatch({ type: \"SET_VOTER\", payload: voter })\n      }\n    } catch (error) {\n      console.error(\"Error loading voter data:\", error)\n    }\n  }\n\n  // Load current election\n  const loadCurrentElection = async (contract) => {\n    try {\n      const election = await contract.getCurrentElection()\n      console.log(\"Current election loaded:\", election)\n\n      if (election.id > 0) {\n        dispatch({ type: \"SET_CURRENT_ELECTION\", payload: election })\n        await loadCandidates(contract, election.id)\n      } else {\n        dispatch({ type: \"SET_CURRENT_ELECTION\", payload: null })\n        dispatch({ type: \"SET_CANDIDATES\", payload: [] })\n      }\n    } catch (error) {\n      console.error(\"Error loading current election:\", error)\n    }\n  }\n\n  // Load all elections\n  const loadAllElections = async (contract) => {\n    try {\n      const electionCounter = await contract.electionCounter()\n      const elections = []\n\n      for (let i = 1; i <= electionCounter; i++) {\n        try {\n          const election = await contract.getElection(i)\n          if (election.id > 0) {\n            elections.push(election)\n          }\n        } catch (error) {\n          console.error(`Error loading election ${i}:`, error)\n        }\n      }\n\n      console.log(\"All elections loaded:\", elections)\n      dispatch({ type: \"SET_ALL_ELECTIONS\", payload: elections })\n    } catch (error) {\n      console.error(\"Error loading all elections:\", error)\n    }\n  }\n\n  // Load candidates for current election\n  const loadCandidates = async (contract, electionId) => {\n    try {\n      const candidates = await contract.getElectionResults(electionId)\n      dispatch({ type: \"SET_CANDIDATES\", payload: candidates })\n    } catch (error) {\n      console.error(\"Error loading candidates:\", error)\n    }\n  }\n\n  // Register voter\n  const registerVoter = async (voterData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      // Validate voter ID before submitting\n      const validation = await validateVoterId(voterData.voterId)\n\n      if (!validation.isValid || !validation.isAvailable) {\n        toast.error(validation.message)\n        return false\n      }\n\n      const tx = await state.contract.requestRegistration(\n        voterData.voterId,\n        voterData.name,\n        voterData.nationalId,\n        voterData.email,\n      )\n\n      await tx.wait()\n      toast.success(\"Registration request submitted successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Registration error:\", error)\n      toast.error(error.reason || \"Registration failed. Please try again.\")\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Cast vote\n  const castVote = async (candidateId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.vote(candidateId)\n      await tx.wait()\n\n      // Reload voter data and candidates\n      await loadVoterData(state.contract, state.account)\n      await loadCandidates(state.contract, state.currentElection.id)\n\n      toast.success(\"Vote cast successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Voting error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Admin functions\n  const verifyVoter = async (requestId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.verifyVoter(requestId)\n      await tx.wait()\n\n      toast.success(\"Voter verified successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Verification error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const addCandidate = async (candidateData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.addCandidate(\n        candidateData.name,\n        candidateData.party,\n        candidateData.imageUrl || \"\",\n      )\n      await tx.wait()\n\n      toast.success(\"Candidate added successfully!\")\n      await loadAllElections(state.contract)\n      return true\n    } catch (error) {\n      console.error(\"Add candidate error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const createElection = async (electionData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.createElection(\n        electionData.title,\n        electionData.description,\n        electionData.candidateIds,\n      )\n      await tx.wait()\n\n      await loadAllElections(state.contract)\n      await loadCurrentElection(state.contract)\n\n      toast.success(\"Election created successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Create election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const startElection = async (electionId, duration) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.startElection(electionId, duration)\n      await tx.wait()\n\n      await loadCurrentElection(state.contract)\n      await loadAllElections(state.contract)\n\n      toast.success(\"Election started successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Start election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const endElection = async (electionId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.endElection(electionId)\n      await tx.wait()\n\n      await loadCurrentElection(state.contract)\n      await loadAllElections(state.contract)\n\n      toast.success(\"Election ended successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"End election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Auto-connect on page load\n  useEffect(() => {\n    const autoConnect = async () => {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\",\n          })\n          if (accounts.length > 0) {\n            await connectWallet()\n          }\n        } catch (error) {\n          console.error(\"Auto-connect error:\", error)\n        }\n      }\n    }\n\n    autoConnect()\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length === 0) {\n          dispatch({ type: \"DISCONNECT\" })\n        } else {\n          connectWallet()\n        }\n      })\n\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload()\n      })\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners(\"accountsChanged\")\n        window.ethereum.removeAllListeners(\"chainChanged\")\n      }\n    }\n  }, [])\n\n  const value = {\n    ...state,\n    connectWallet,\n    registerVoter,\n    castVote,\n    verifyVoter,\n    addCandidate,\n    createElection,\n    startElection,\n    endElection,\n    validateVoterId,\n    loadCurrentElection: () => loadCurrentElection(state.contract),\n    loadAllElections: () => loadAllElections(state.contract),\n    loadCandidates: (electionId) => loadCandidates(state.contract, electionId),\n  }\n\n  return <VotingContext.Provider value={value}>{children}</VotingContext.Provider>\n}\n\nexport function useVoting() {\n  const context = useContext(VotingContext)\n  if (!context) {\n    throw new Error(\"useVoting must be used within a VotingProvider\")\n  }\n  return context\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}