{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { Log, TransactionReceipt, TransactionResponse } from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n  /**\n   *  The Contract Interface.\n   */\n\n  /**\n   *  The matching event.\n   */\n\n  /**\n   *  The parsed arguments passed to the event by ``emit``.\n   */\n\n  /**\n   * @_ignore:\n   */\n  constructor(log, iface, fragment) {\n    super(log, log.provider);\n    const args = iface.decodeEventLog(fragment, log.data, log.topics);\n    defineProperties(this, {\n      args,\n      fragment,\n      interface: iface\n    });\n  }\n  /**\n   *  The name of the event.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The signature of the event.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n  /**\n   *  The error encounted when trying to decode the log.\n   */\n\n  /**\n   * @_ignore:\n   */\n  constructor(log, error) {\n    super(log, log.provider);\n    defineProperties(this, {\n      error\n    });\n  }\n}\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nvar _iface = /*#__PURE__*/_classPrivateFieldLooseKey(\"iface\");\nexport class ContractTransactionReceipt extends TransactionReceipt {\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    Object.defineProperty(this, _iface, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _iface)[_iface] = iface;\n  }\n  /**\n   *  The parsed logs for any [[Log]] which has a matching event in the\n   *  Contract ABI.\n   */\n  get logs() {\n    return super.logs.map(log => {\n      const fragment = log.topics.length ? _classPrivateFieldLooseBase(this, _iface)[_iface].getEvent(log.topics[0]) : null;\n      if (fragment) {\n        try {\n          return new EventLog(log, _classPrivateFieldLooseBase(this, _iface)[_iface], fragment);\n        } catch (error) {\n          return new UndecodedEventLog(log, error);\n        }\n      }\n      return log;\n    });\n  }\n}\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nvar _iface2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"iface\");\nexport class ContractTransactionResponse extends TransactionResponse {\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    Object.defineProperty(this, _iface2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _iface2)[_iface2] = iface;\n  }\n  /**\n   *  Resolves once this transaction has been mined and has\n   *  %%confirms%% blocks including it (default: ``1``) with an\n   *  optional %%timeout%%.\n   *\n   *  This can resolve to ``null`` only if %%confirms%% is ``0``\n   *  and the transaction has not been mined, otherwise this will\n   *  wait until enough confirmations have completed.\n   */\n  async wait(confirms, timeout) {\n    const receipt = await super.wait(confirms, timeout);\n    if (receipt == null) {\n      return null;\n    }\n    return new ContractTransactionReceipt(_classPrivateFieldLooseBase(this, _iface2)[_iface2], this.provider, receipt);\n  }\n}\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport class ContractUnknownEventPayload extends EventPayload {\n  /**\n   *  The log with no matching events.\n   */\n\n  /**\n   *  @_event:\n   */\n  constructor(contract, listener, filter, log) {\n    super(contract, listener, filter);\n    defineProperties(this, {\n      log\n    });\n  }\n  /**\n   *  Resolves to the block the event occured in.\n   */\n  async getBlock() {\n    return await this.log.getBlock();\n  }\n  /**\n   *  Resolves to the transaction the event occured in.\n   */\n  async getTransaction() {\n    return await this.log.getTransaction();\n  }\n  /**\n   *  Resolves to the transaction receipt the event occured in.\n   */\n  async getTransactionReceipt() {\n    return await this.log.getTransactionReceipt();\n  }\n}\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n  /**\n   *  @_ignore:\n   */\n  constructor(contract, listener, filter, fragment, _log) {\n    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n    defineProperties(this, {\n      args,\n      fragment\n    });\n  }\n  /**\n   *  The event name.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The event signature.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}","map":{"version":3,"names":["Log","TransactionReceipt","TransactionResponse","defineProperties","EventPayload","EventLog","constructor","log","iface","fragment","provider","args","decodeEventLog","data","topics","interface","eventName","name","eventSignature","format","UndecodedEventLog","error","_iface","_classPrivateFieldLooseKey","ContractTransactionReceipt","tx","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","logs","map","length","getEvent","_iface2","ContractTransactionResponse","wait","confirms","timeout","receipt","ContractUnknownEventPayload","contract","listener","filter","getBlock","getTransaction","getTransactionReceipt","ContractEventPayload","_log"],"sources":["C:\\Users\\DELL\\Desktop\\decentralized-voting-dapp\\src\\node_modules\\ethers\\src.ts\\contract\\wrappers.ts"],"sourcesContent":["// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport {\n    Block, Log, TransactionReceipt, TransactionResponse\n} from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n\nimport type { EventFragment, Interface, Result } from \"../abi/index.js\";\nimport type { Listener } from \"../utils/index.js\";\nimport type {\n    Provider\n} from \"../providers/index.js\";\n\nimport type { BaseContract } from \"./contract.js\";\nimport type { ContractEventName } from \"./types.js\";\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n    /**\n     *  The Contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The matching event.\n     */\n    readonly fragment!: EventFragment;\n\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    readonly args!: Result;\n\n    /**\n     * @_ignore:\n     */\n    constructor(log: Log, iface: Interface, fragment: EventFragment) {\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        defineProperties<EventLog>(this, { args, fragment, interface: iface });\n    }\n\n    /**\n     *  The name of the event.\n     */\n    get eventName(): string { return this.fragment.name; }\n\n    /**\n     *  The signature of the event.\n     */\n    get eventSignature(): string { return this.fragment.format(); }\n}\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n\n    /**\n     *  The error encounted when trying to decode the log.\n     */\n    readonly error!: Error;\n\n    /**\n     * @_ignore:\n     */\n    constructor(log: Log, error: Error) {\n        super(log, log.provider);\n        defineProperties<UndecodedEventLog>(this, { error });\n    }\n}\n\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nexport class ContractTransactionReceipt extends TransactionReceipt {\n    readonly #iface: Interface;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(iface: Interface, provider: Provider, tx: TransactionReceipt) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */\n    get logs(): Array<EventLog | Log> {\n        return super.logs.map((log) => {\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]): null;\n            if (fragment) {\n                try {\n                    return new EventLog(log, this.#iface, fragment)\n                } catch (error: any) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n\n            return log;\n        });\n    }\n\n}\n\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nexport class ContractTransactionResponse extends TransactionResponse {\n    readonly #iface: Interface;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(iface: Interface, provider: Provider, tx: TransactionResponse) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(confirms?: number, timeout?: number): Promise<null | ContractTransactionReceipt> {\n        const receipt = await super.wait(confirms, timeout);\n        if (receipt == null) { return null; }\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n    }\n}\n\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport  class ContractUnknownEventPayload extends EventPayload<ContractEventName> {\n    /**\n     *  The log with no matching events.\n     */\n    readonly log!: Log;\n\n    /**\n     *  @_event:\n     */\n    constructor(contract: BaseContract, listener: null | Listener, filter: ContractEventName, log: Log) {\n        super(contract, listener, filter);\n        defineProperties<ContractUnknownEventPayload>(this, { log });\n    }\n\n    /**\n     *  Resolves to the block the event occured in.\n     */\n    async getBlock(): Promise<Block> {\n        return await this.log.getBlock();\n    }\n\n    /**\n     *  Resolves to the transaction the event occured in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        return await this.log.getTransaction();\n    }\n\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        return await this.log.getTransactionReceipt();\n    }\n}\n\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n\n    /**\n     *  The matching event.\n     */\n    declare readonly fragment: EventFragment;\n\n    /**\n     *  The log, with parsed properties.\n     */\n    declare readonly log: EventLog;\n\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    declare readonly args: Result;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(contract: BaseContract, listener: null | Listener, filter: ContractEventName, fragment: EventFragment, _log: Log) {\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        defineProperties<ContractEventPayload>(this, { args, fragment });\n    }\n\n    /**\n     *  The event name.\n     */\n    get eventName(): string {\n        return this.fragment.name;\n    }\n\n    /**\n     *  The event signature.\n     */\n    get eventSignature(): string {\n        return this.fragment.format();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}