{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\decentralized-voting-dapp\\\\src\\\\context\\\\VotingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport toast from \"react-hot-toast\";\nimport VotingSystemABI from \"../contracts/VotingSystem.json\";\nimport deploymentInfo from \"../contracts/deployment.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VotingContext = /*#__PURE__*/createContext();\nconst initialState = {\n  account: null,\n  contract: null,\n  provider: null,\n  signer: null,\n  isConnected: false,\n  isLoading: false,\n  voter: null,\n  currentElection: null,\n  candidates: [],\n  isAdmin: false,\n  error: null\n};\nfunction votingReducer(state, action) {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case \"SET_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload\n      };\n    case \"SET_CONNECTION\":\n      return {\n        ...state,\n        provider: action.payload.provider,\n        signer: action.payload.signer,\n        contract: action.payload.contract,\n        isConnected: true\n      };\n    case \"SET_VOTER\":\n      return {\n        ...state,\n        voter: action.payload\n      };\n    case \"SET_CURRENT_ELECTION\":\n      return {\n        ...state,\n        currentElection: action.payload\n      };\n    case \"SET_CANDIDATES\":\n      return {\n        ...state,\n        candidates: action.payload\n      };\n    case \"SET_IS_ADMIN\":\n      return {\n        ...state,\n        isAdmin: action.payload\n      };\n    case \"SET_ERROR\":\n      return {\n        ...state,\n        error: action.payload\n      };\n    case \"DISCONNECT\":\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n}\nexport function VotingProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(votingReducer, initialState);\n\n  // Initialize Web3 connection\n  const connectWallet = async () => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed\");\n      }\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = new ethers.Contract(deploymentInfo.contractAddress, VotingSystemABI.abi, signer);\n      dispatch({\n        type: \"SET_CONNECTION\",\n        payload: {\n          provider,\n          signer,\n          contract\n        }\n      });\n      dispatch({\n        type: \"SET_ACCOUNT\",\n        payload: accounts[0]\n      });\n\n      // Check if user is admin\n      const electoralCommission = await contract.electoralCommission();\n      const isAdmin = accounts[0].toLowerCase() === electoralCommission.toLowerCase();\n      dispatch({\n        type: \"SET_IS_ADMIN\",\n        payload: isAdmin\n      });\n\n      // Load voter data if not admin\n      if (!isAdmin) {\n        await loadVoterData(contract, accounts[0]);\n      }\n\n      // Load current election\n      await loadCurrentElection(contract);\n      toast.success(\"Wallet connected successfully!\");\n    } catch (error) {\n      console.error(\"Connection error:\", error);\n      dispatch({\n        type: \"SET_ERROR\",\n        payload: error.message\n      });\n      toast.error(error.message);\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Load voter data\n  const loadVoterData = async (contract, account) => {\n    try {\n      const voter = await contract.getVoter(account);\n      if (voter.walletAddress !== \"0x0000000000000000000000000000000000000000\") {\n        dispatch({\n          type: \"SET_VOTER\",\n          payload: voter\n        });\n      }\n    } catch (error) {\n      console.error(\"Error loading voter data:\", error);\n    }\n  };\n\n  // Load current election\n  const loadCurrentElection = async contract => {\n    try {\n      const election = await contract.getCurrentElection();\n      if (election.id > 0) {\n        dispatch({\n          type: \"SET_CURRENT_ELECTION\",\n          payload: election\n        });\n        await loadCandidates(contract, election.id);\n      }\n    } catch (error) {\n      console.error(\"Error loading current election:\", error);\n    }\n  };\n\n  // Load candidates for current election\n  const loadCandidates = async (contract, electionId) => {\n    try {\n      const candidates = await contract.getElectionResults(electionId);\n      dispatch({\n        type: \"SET_CANDIDATES\",\n        payload: candidates\n      });\n    } catch (error) {\n      console.error(\"Error loading candidates:\", error);\n    }\n  };\n\n  // Register voter\n  const registerVoter = async voterData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.requestRegistration(voterData.voterId, voterData.name, voterData.nationalId, voterData.email);\n      await tx.wait();\n      toast.success(\"Registration request submitted successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Cast vote\n  const castVote = async candidateId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.vote(candidateId);\n      await tx.wait();\n\n      // Reload voter data and candidates\n      await loadVoterData(state.contract, state.account);\n      await loadCandidates(state.contract, state.currentElection.id);\n      toast.success(\"Vote cast successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Voting error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Admin functions\n  const verifyVoter = async requestId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.verifyVoter(requestId);\n      await tx.wait();\n      toast.success(\"Voter verified successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Verification error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const addCandidate = async candidateData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.addCandidate(candidateData.name, candidateData.party, candidateData.imageUrl || \"\");\n      await tx.wait();\n      toast.success(\"Candidate added successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Add candidate error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const createElection = async electionData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.createElection(electionData.title, electionData.description, electionData.candidateIds);\n      await tx.wait();\n      toast.success(\"Election created successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Create election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const startElection = async (electionId, duration) => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.startElection(electionId, duration);\n      await tx.wait();\n      await loadCurrentElection(state.contract);\n      toast.success(\"Election started successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Start election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const endElection = async electionId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const tx = await state.contract.endElection(electionId);\n      await tx.wait();\n      await loadCurrentElection(state.contract);\n      toast.success(\"Election ended successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"End election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Auto-connect on page load\n  useEffect(() => {\n    const autoConnect = async () => {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n          });\n          if (accounts.length > 0) {\n            await connectWallet();\n          }\n        } catch (error) {\n          console.error(\"Auto-connect error:\", error);\n        }\n      }\n    };\n    autoConnect();\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length === 0) {\n          dispatch({\n            type: \"DISCONNECT\"\n          });\n        } else {\n          connectWallet();\n        }\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners(\"accountsChanged\");\n        window.ethereum.removeAllListeners(\"chainChanged\");\n      }\n    };\n  }, []);\n  const value = {\n    ...state,\n    connectWallet,\n    registerVoter,\n    castVote,\n    verifyVoter,\n    addCandidate,\n    createElection,\n    startElection,\n    endElection,\n    loadCurrentElection: () => loadCurrentElection(state.contract),\n    loadCandidates: electionId => loadCandidates(state.contract, electionId)\n  };\n  return /*#__PURE__*/_jsxDEV(VotingContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 345,\n    columnNumber: 10\n  }, this);\n}\n_s(VotingProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = VotingProvider;\nexport function useVoting() {\n  _s2();\n  const context = useContext(VotingContext);\n  if (!context) {\n    throw new Error(\"useVoting must be used within a VotingProvider\");\n  }\n  return context;\n}\n_s2(useVoting, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"VotingProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useReducer","useEffect","ethers","toast","VotingSystemABI","deploymentInfo","jsxDEV","_jsxDEV","VotingContext","initialState","account","contract","provider","signer","isConnected","isLoading","voter","currentElection","candidates","isAdmin","error","votingReducer","state","action","type","payload","VotingProvider","children","dispatch","connectWallet","window","ethereum","Error","accounts","request","method","BrowserProvider","getSigner","Contract","contractAddress","abi","electoralCommission","toLowerCase","loadVoterData","loadCurrentElection","success","console","message","getVoter","walletAddress","election","getCurrentElection","id","loadCandidates","electionId","getElectionResults","registerVoter","voterData","tx","requestRegistration","voterId","name","nationalId","email","wait","reason","castVote","candidateId","vote","verifyVoter","requestId","addCandidate","candidateData","party","imageUrl","createElection","electionData","title","description","candidateIds","startElection","duration","endElection","autoConnect","length","on","location","reload","removeAllListeners","value","Provider","fileName","lineNumber","columnNumber","_c","useVoting","context","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/decentralized-voting-dapp/src/context/VotingContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useReducer, useEffect } from \"react\"\nimport { ethers } from \"ethers\"\nimport toast from \"react-hot-toast\"\nimport VotingSystemABI from \"../contracts/VotingSystem.json\"\nimport deploymentInfo from \"../contracts/deployment.json\"\n\nconst VotingContext = createContext()\n\nconst initialState = {\n  account: null,\n  contract: null,\n  provider: null,\n  signer: null,\n  isConnected: false,\n  isLoading: false,\n  voter: null,\n  currentElection: null,\n  candidates: [],\n  isAdmin: false,\n  error: null,\n}\n\nfunction votingReducer(state, action) {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return { ...state, isLoading: action.payload }\n    case \"SET_ACCOUNT\":\n      return { ...state, account: action.payload }\n    case \"SET_CONNECTION\":\n      return {\n        ...state,\n        provider: action.payload.provider,\n        signer: action.payload.signer,\n        contract: action.payload.contract,\n        isConnected: true,\n      }\n    case \"SET_VOTER\":\n      return { ...state, voter: action.payload }\n    case \"SET_CURRENT_ELECTION\":\n      return { ...state, currentElection: action.payload }\n    case \"SET_CANDIDATES\":\n      return { ...state, candidates: action.payload }\n    case \"SET_IS_ADMIN\":\n      return { ...state, isAdmin: action.payload }\n    case \"SET_ERROR\":\n      return { ...state, error: action.payload }\n    case \"DISCONNECT\":\n      return { ...initialState }\n    default:\n      return state\n  }\n}\n\nexport function VotingProvider({ children }) {\n  const [state, dispatch] = useReducer(votingReducer, initialState)\n\n  // Initialize Web3 connection\n  const connectWallet = async () => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed\")\n      }\n\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n\n      const provider = new ethers.BrowserProvider(window.ethereum)\n      const signer = await provider.getSigner()\n      const contract = new ethers.Contract(deploymentInfo.contractAddress, VotingSystemABI.abi, signer)\n\n      dispatch({\n        type: \"SET_CONNECTION\",\n        payload: { provider, signer, contract },\n      })\n\n      dispatch({ type: \"SET_ACCOUNT\", payload: accounts[0] })\n\n      // Check if user is admin\n      const electoralCommission = await contract.electoralCommission()\n      const isAdmin = accounts[0].toLowerCase() === electoralCommission.toLowerCase()\n      dispatch({ type: \"SET_IS_ADMIN\", payload: isAdmin })\n\n      // Load voter data if not admin\n      if (!isAdmin) {\n        await loadVoterData(contract, accounts[0])\n      }\n\n      // Load current election\n      await loadCurrentElection(contract)\n\n      toast.success(\"Wallet connected successfully!\")\n    } catch (error) {\n      console.error(\"Connection error:\", error)\n      dispatch({ type: \"SET_ERROR\", payload: error.message })\n      toast.error(error.message)\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Load voter data\n  const loadVoterData = async (contract, account) => {\n    try {\n      const voter = await contract.getVoter(account)\n      if (voter.walletAddress !== \"0x0000000000000000000000000000000000000000\") {\n        dispatch({ type: \"SET_VOTER\", payload: voter })\n      }\n    } catch (error) {\n      console.error(\"Error loading voter data:\", error)\n    }\n  }\n\n  // Load current election\n  const loadCurrentElection = async (contract) => {\n    try {\n      const election = await contract.getCurrentElection()\n      if (election.id > 0) {\n        dispatch({ type: \"SET_CURRENT_ELECTION\", payload: election })\n        await loadCandidates(contract, election.id)\n      }\n    } catch (error) {\n      console.error(\"Error loading current election:\", error)\n    }\n  }\n\n  // Load candidates for current election\n  const loadCandidates = async (contract, electionId) => {\n    try {\n      const candidates = await contract.getElectionResults(electionId)\n      dispatch({ type: \"SET_CANDIDATES\", payload: candidates })\n    } catch (error) {\n      console.error(\"Error loading candidates:\", error)\n    }\n  }\n\n  // Register voter\n  const registerVoter = async (voterData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.requestRegistration(\n        voterData.voterId,\n        voterData.name,\n        voterData.nationalId,\n        voterData.email,\n      )\n\n      await tx.wait()\n      toast.success(\"Registration request submitted successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Registration error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Cast vote\n  const castVote = async (candidateId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.vote(candidateId)\n      await tx.wait()\n\n      // Reload voter data and candidates\n      await loadVoterData(state.contract, state.account)\n      await loadCandidates(state.contract, state.currentElection.id)\n\n      toast.success(\"Vote cast successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Voting error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Admin functions\n  const verifyVoter = async (requestId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.verifyVoter(requestId)\n      await tx.wait()\n\n      toast.success(\"Voter verified successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Verification error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const addCandidate = async (candidateData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.addCandidate(\n        candidateData.name,\n        candidateData.party,\n        candidateData.imageUrl || \"\",\n      )\n\n      await tx.wait()\n      toast.success(\"Candidate added successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Add candidate error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const createElection = async (electionData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.createElection(\n        electionData.title,\n        electionData.description,\n        electionData.candidateIds,\n      )\n\n      await tx.wait()\n      toast.success(\"Election created successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Create election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const startElection = async (electionId, duration) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.startElection(electionId, duration)\n      await tx.wait()\n\n      await loadCurrentElection(state.contract)\n      toast.success(\"Election started successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Start election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const endElection = async (electionId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const tx = await state.contract.endElection(electionId)\n      await tx.wait()\n\n      await loadCurrentElection(state.contract)\n      toast.success(\"Election ended successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"End election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Auto-connect on page load\n  useEffect(() => {\n    const autoConnect = async () => {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\",\n          })\n          if (accounts.length > 0) {\n            await connectWallet()\n          }\n        } catch (error) {\n          console.error(\"Auto-connect error:\", error)\n        }\n      }\n    }\n\n    autoConnect()\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length === 0) {\n          dispatch({ type: \"DISCONNECT\" })\n        } else {\n          connectWallet()\n        }\n      })\n\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload()\n      })\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners(\"accountsChanged\")\n        window.ethereum.removeAllListeners(\"chainChanged\")\n      }\n    }\n  }, [])\n\n  const value = {\n    ...state,\n    connectWallet,\n    registerVoter,\n    castVote,\n    verifyVoter,\n    addCandidate,\n    createElection,\n    startElection,\n    endElection,\n    loadCurrentElection: () => loadCurrentElection(state.contract),\n    loadCandidates: (electionId) => loadCandidates(state.contract, electionId),\n  }\n\n  return <VotingContext.Provider value={value}>{children}</VotingContext.Provider>\n}\n\nexport function useVoting() {\n  const context = useContext(VotingContext)\n  if (!context) {\n    throw new Error(\"useVoting must be used within a VotingProvider\")\n  }\n  return context\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}