{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport { defineProperties } from \"../utils/properties.js\";\nimport { assertArgument } from \"../utils/index.js\";\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n  /**\n   *  The name of the plugin.\n   *\n   *  It is recommended to use reverse-domain-notation, which permits\n   *  unique names with a known authority as well as hierarchal entries.\n   */\n\n  /**\n   *  Creates a new **NetworkPlugin**.\n   */\n  constructor(name) {\n    defineProperties(this, {\n      name\n    });\n  }\n  /**\n   *  Creates a copy of this plugin.\n   */\n  clone() {\n    return new NetworkPlugin(this.name);\n  }\n}\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin {\n  /**\n   *  The block number to treat these values as valid from.\n   *\n   *  This allows a hardfork to have updated values included as well as\n   *  mulutiple hardforks to be supported.\n   */\n\n  /**\n   *  The transactions base fee.\n   */\n\n  /**\n   *  The fee for creating a new account.\n   */\n\n  /**\n   *  The fee per zero-byte in the data.\n   */\n\n  /**\n   *  The fee per non-zero-byte in the data.\n   */\n\n  /**\n   *  The fee per storage key in the [[link-eip-2930]] access list.\n   */\n\n  /**\n   *  The fee per address in the [[link-eip-2930]] access list.\n   */\n\n  /**\n   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n   *  latest block or another GasCostPlugin supercedes that block number,\n   *  with the associated %%costs%%.\n   */\n  constructor(effectiveBlock, costs) {\n    if (effectiveBlock == null) {\n      effectiveBlock = 0;\n    }\n    super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);\n    const props = {\n      effectiveBlock\n    };\n    function set(name, nullish) {\n      let value = (costs || {})[name];\n      if (value == null) {\n        value = nullish;\n      }\n      assertArgument(typeof value === \"number\", `invalud value for ${name}`, \"costs\", costs);\n      props[name] = value;\n    }\n    set(\"txBase\", 21000);\n    set(\"txCreate\", 32000);\n    set(\"txDataZero\", 4);\n    set(\"txDataNonzero\", 16);\n    set(\"txAccessListStorageKey\", 1900);\n    set(\"txAccessListAddress\", 2400);\n    defineProperties(this, props);\n  }\n  clone() {\n    return new GasCostPlugin(this.effectiveBlock, this);\n  }\n}\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n  /**\n   *  The ENS Registrty Contract address.\n   */\n\n  /**\n   *  The chain ID that the ENS contract lives on.\n   */\n\n  /**\n   *  Creates a new **EnsPlugin** connected to %%address%% on the\n   *  %%targetNetwork%%. The default ENS address and mainnet is used\n   *  if unspecified.\n   */\n  constructor(address, targetNetwork) {\n    super(\"org.ethers.plugins.network.Ens\");\n    defineProperties(this, {\n      address: address || EnsAddress,\n      targetNetwork: targetNetwork == null ? 1 : targetNetwork\n    });\n  }\n  clone() {\n    return new EnsPlugin(this.address, this.targetNetwork);\n  }\n}\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nvar _feeDataFunc = /*#__PURE__*/_classPrivateFieldLooseKey(\"feeDataFunc\");\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n  /**\n   *  The fee data function provided to the constructor.\n   */\n  get feeDataFunc() {\n    return _classPrivateFieldLooseBase(this, _feeDataFunc)[_feeDataFunc];\n  }\n  /**\n   *  Creates a new **FeeDataNetworkPlugin**.\n   */\n  constructor(feeDataFunc) {\n    super(\"org.ethers.plugins.network.FeeData\");\n    Object.defineProperty(this, _feeDataFunc, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _feeDataFunc)[_feeDataFunc] = feeDataFunc;\n  }\n  /**\n   *  Resolves to the fee data.\n   */\n  async getFeeData(provider) {\n    return await _classPrivateFieldLooseBase(this, _feeDataFunc)[_feeDataFunc](provider);\n  }\n  clone() {\n    return new FeeDataNetworkPlugin(_classPrivateFieldLooseBase(this, _feeDataFunc)[_feeDataFunc]);\n  }\n}\nvar _url = /*#__PURE__*/_classPrivateFieldLooseKey(\"url\");\nvar _processFunc = /*#__PURE__*/_classPrivateFieldLooseKey(\"processFunc\");\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n  /**\n   *  The URL to initialize the FetchRequest with in %%processFunc%%.\n   */\n  get url() {\n    return _classPrivateFieldLooseBase(this, _url)[_url];\n  }\n  /**\n   *  The callback to use when computing the FeeData.\n   */\n  get processFunc() {\n    return _classPrivateFieldLooseBase(this, _processFunc)[_processFunc];\n  }\n  /**\n   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n   *  be used when computing the fee data for the network.\n   */\n  constructor(url, processFunc) {\n    super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n    Object.defineProperty(this, _url, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _processFunc, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _url)[_url] = url;\n    _classPrivateFieldLooseBase(this, _processFunc)[_processFunc] = processFunc;\n  }\n  // We are immutable, so we can serve as our own clone\n  clone() {\n    return this;\n  }\n}\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/","map":{"version":3,"names":["defineProperties","assertArgument","EnsAddress","NetworkPlugin","constructor","name","clone","GasCostPlugin","effectiveBlock","costs","props","set","nullish","value","EnsPlugin","address","targetNetwork","_feeDataFunc","_classPrivateFieldLooseKey","FeeDataNetworkPlugin","feeDataFunc","_classPrivateFieldLooseBase","Object","defineProperty","writable","getFeeData","provider","_url","_processFunc","FetchUrlFeeDataNetworkPlugin","url","processFunc"],"sources":["C:\\Users\\DELL\\Desktop\\decentralized-voting-dapp\\src\\node_modules\\ethers\\src.ts\\providers\\plugins-network.ts"],"sourcesContent":["import { defineProperties } from \"../utils/properties.js\";\n\nimport { assertArgument } from \"../utils/index.js\";\n\nimport type { FeeData, Provider } from \"./provider.js\";\nimport type { FetchRequest } from \"../utils/fetch.js\";\n\n\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n\n/**\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\n */\nexport class NetworkPlugin {\n    /**\n     *  The name of the plugin.\n     *\n     *  It is recommended to use reverse-domain-notation, which permits\n     *  unique names with a known authority as well as hierarchal entries.\n     */\n    readonly name!: string;\n\n    /**\n     *  Creates a new **NetworkPlugin**.\n     */\n    constructor(name: string) {\n        defineProperties<NetworkPlugin>(this, { name });\n    }\n\n    /**\n     *  Creates a copy of this plugin.\n     */\n    clone(): NetworkPlugin {\n        return new NetworkPlugin(this.name);\n    }\n\n//    validate(network: Network): NetworkPlugin {\n//        return this;\n//    }\n}\n\n\n/**\n *  The gas cost parameters for a [[GasCostPlugin]].\n */\nexport type GasCostParameters = {\n    /**\n     *  The transactions base fee.\n     */\n    txBase?: number;\n\n    /**\n     *  The fee for creating a new account.\n     */\n    txCreate?: number;\n\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    txDataZero?: number;\n\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    txDataNonzero?: number;\n\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    txAccessListStorageKey?: number;\n\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    txAccessListAddress?: number;\n};\n\n/**\n *  A **GasCostPlugin** allows a network to provide alternative values when\n *  computing the intrinsic gas required for a transaction.\n */\nexport class GasCostPlugin extends NetworkPlugin implements GasCostParameters {\n    /**\n     *  The block number to treat these values as valid from.\n     *\n     *  This allows a hardfork to have updated values included as well as\n     *  mulutiple hardforks to be supported.\n     */\n    readonly effectiveBlock!: number;\n\n    /**\n     *  The transactions base fee.\n     */\n    readonly txBase!: number;\n\n    /**\n     *  The fee for creating a new account.\n     */\n    readonly txCreate!: number;\n\n    /**\n     *  The fee per zero-byte in the data.\n     */\n    readonly txDataZero!: number;\n\n    /**\n     *  The fee per non-zero-byte in the data.\n     */\n    readonly txDataNonzero!: number;\n\n    /**\n     *  The fee per storage key in the [[link-eip-2930]] access list.\n     */\n    readonly txAccessListStorageKey!: number;\n\n    /**\n     *  The fee per address in the [[link-eip-2930]] access list.\n     */\n    readonly txAccessListAddress!: number;\n\n\n    /**\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\n     *  latest block or another GasCostPlugin supercedes that block number,\n     *  with the associated %%costs%%.\n     */\n    constructor(effectiveBlock?: number, costs?: GasCostParameters) {\n        if (effectiveBlock == null) { effectiveBlock = 0; }\n        super(`org.ethers.network.plugins.GasCost#${ (effectiveBlock || 0) }`);\n\n        const props: Record<string, number> = { effectiveBlock };\n        function set(name: keyof GasCostParameters, nullish: number): void {\n            let value = (costs || { })[name];\n            if (value == null) { value = nullish; }\n            assertArgument(typeof(value) === \"number\", `invalud value for ${ name }`, \"costs\", costs);\n            props[name] = value;\n        }\n\n        set(\"txBase\", 21000);\n        set(\"txCreate\", 32000);\n        set(\"txDataZero\", 4);\n        set(\"txDataNonzero\", 16);\n        set(\"txAccessListStorageKey\", 1900);\n        set(\"txAccessListAddress\", 2400);\n\n        defineProperties<GasCostPlugin>(this, props);\n    }\n\n    clone(): GasCostPlugin {\n        return new GasCostPlugin(this.effectiveBlock, this);\n    }\n}\n\n/**\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\n *  Contract address and the target network to use when using that\n *  contract.\n *\n *  Various testnets have their own instance of the contract to use, but\n *  in general, the mainnet instance supports multi-chain addresses and\n *  should be used.\n */\nexport class EnsPlugin extends NetworkPlugin {\n\n    /**\n     *  The ENS Registrty Contract address.\n     */\n    readonly address!: string;\n\n    /**\n     *  The chain ID that the ENS contract lives on.\n     */\n    readonly targetNetwork!: number;\n\n    /**\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\n     *  if unspecified.\n     */\n    constructor(address?: null | string, targetNetwork?: null | number) {\n        super(\"org.ethers.plugins.network.Ens\");\n        defineProperties<EnsPlugin>(this, {\n            address: (address || EnsAddress),\n            targetNetwork: ((targetNetwork == null) ? 1: targetNetwork)\n        });\n    }\n\n    clone(): EnsPlugin {\n        return new EnsPlugin(this.address, this.targetNetwork);\n    }\n}\n\n/**\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\n *  means to specify its fee data.\n *\n *  For example, a network which does not support [[link-eip-1559]] may\n *  choose to use a Gas Station site to approximate the gas price.\n */\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n    readonly #feeDataFunc: (provider: Provider) => Promise<FeeData>;\n\n    /**\n     *  The fee data function provided to the constructor.\n     */\n    get feeDataFunc(): (provider: Provider) => Promise<FeeData> {\n        return this.#feeDataFunc;\n    }\n\n    /**\n     *  Creates a new **FeeDataNetworkPlugin**.\n     */\n    constructor(feeDataFunc: (provider: Provider) => Promise<FeeData>) {\n        super(\"org.ethers.plugins.network.FeeData\");\n        this.#feeDataFunc = feeDataFunc;\n    }\n\n    /**\n     *  Resolves to the fee data.\n     */\n    async getFeeData(provider: Provider): Promise<FeeData> {\n        return await this.#feeDataFunc(provider);\n    }\n\n    clone(): FeeDataNetworkPlugin {\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\n    }\n}\n\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n    readonly #url: string;\n    readonly #processFunc: (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }>;\n\n    /**\n     *  The URL to initialize the FetchRequest with in %%processFunc%%.\n     */\n    get url(): string { return this.#url; }\n\n    /**\n     *  The callback to use when computing the FeeData.\n     */\n    get processFunc(): (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }> { return this.#processFunc; }\n\n    /**\n     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\n     *  be used when computing the fee data for the network.\n     */\n    constructor(url: string, processFunc: (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }>) {\n        super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n        this.#url = url;\n        this.#processFunc = processFunc;\n    }\n\n    // We are immutable, so we can serve as our own clone\n    clone(): FetchUrlFeeDataNetworkPlugin { return this; }\n}\n\n/*\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\n\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\n        super(\"org.ethers.network-plugins.custom-block\");\n        this.#blockFunc = blockFunc;\n        this.#blockWithTxsFunc = blockWithTxsFunc;\n    }\n\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\n        return await this.#blockFunc(provider, block);\n    }\n\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\n        return await this.#blockWithTxsFunc(provider, block);\n    }\n\n    clone(): CustomBlockNetworkPlugin {\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\n    }\n}\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}