{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\n//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\nimport { id } from \"./id.js\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n  const bytes = getBytes(value);\n  const padOffset = bytes.length % 32;\n  if (padOffset) {\n    return concat([bytes, padding.slice(padOffset)]);\n  }\n  return hexlify(bytes);\n}\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\nconst domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nconst domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\nfunction checkString(key) {\n  return function (value) {\n    assertArgument(typeof value === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n    return value;\n  };\n}\nconst domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function (_value) {\n    const value = getBigInt(_value, \"domain.chainId\");\n    assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n    if (Number.isSafeInteger(value)) {\n      return Number(value);\n    }\n    return toQuantity(value);\n  },\n  verifyingContract: function (value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n    assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n  },\n  salt: function (value) {\n    const bytes = getBytes(value, \"domain.salt\");\n    assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n    return hexlify(bytes);\n  }\n};\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    const match = type.match(/^(u?)int(\\d+)$/);\n    if (match) {\n      const signed = match[1] === \"\";\n      const width = parseInt(match[2]);\n      assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\n      const boundsUpper = mask(BN_MAX_UINT256, signed ? width - 1 : width);\n      const boundsLower = signed ? (boundsUpper + BN_1) * BN__1 : BN_0;\n      return function (_value) {\n        const value = getBigInt(_value, \"value\");\n        assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n        return toBeHex(signed ? toTwos(value, 256) : value, 32);\n      };\n    }\n  }\n  // bytesXX\n  {\n    const match = type.match(/^bytes(\\d+)$/);\n    if (match) {\n      const width = parseInt(match[1]);\n      assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n      return function (value) {\n        const bytes = getBytes(value);\n        assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n        return hexPadRight(value);\n      };\n    }\n  }\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return zeroPadValue(getAddress(value), 32);\n      };\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n  return null;\n}\nfunction encodeType(name, fields) {\n  return `${name}(${fields.map(({\n    name,\n    type\n  }) => type + \" \" + name).join(\",\")})`;\n}\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\nfunction splitArray(type) {\n  const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\n  if (match) {\n    return {\n      base: match[1],\n      index: match[2] + match[4],\n      array: {\n        base: match[1],\n        prefix: match[1] + match[2],\n        count: match[5] ? parseInt(match[5]) : -1\n      }\n    };\n  }\n  return {\n    base: type\n  };\n}\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nvar _types2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"types\");\nvar _fullTypes = /*#__PURE__*/_classPrivateFieldLooseKey(\"fullTypes\");\nvar _encoderCache = /*#__PURE__*/_classPrivateFieldLooseKey(\"encoderCache\");\nvar _getEncoder = /*#__PURE__*/_classPrivateFieldLooseKey(\"getEncoder\");\nexport class TypedDataEncoder {\n  /**\n   *  The types.\n   */\n  get types() {\n    return JSON.parse(_classPrivateFieldLooseBase(this, _types2)[_types2]);\n  }\n  /**\n   *  Create a new **TypedDataEncoder** for %%types%%.\n   *\n   *  This performs all necessary checking that types are valid and\n   *  do not violate the [[link-eip-712]] structural constraints as\n   *  well as computes the [[primaryType]].\n   */\n  constructor(_types) {\n    Object.defineProperty(this, _getEncoder, {\n      value: _getEncoder2\n    });\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    Object.defineProperty(this, _types2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _fullTypes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _encoderCache, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _fullTypes)[_fullTypes] = new Map();\n    _classPrivateFieldLooseBase(this, _encoderCache)[_encoderCache] = new Map();\n    // Link struct types to their direct child structs\n    const links = new Map();\n    // Link structs to structs which contain them as a child\n    const parents = new Map();\n    // Link all subtypes within a given struct\n    const subtypes = new Map();\n    const types = {};\n    Object.keys(_types).forEach(type => {\n      types[type] = _types[type].map(({\n        name,\n        type\n      }) => {\n        // Normalize the base type (unless name conflict)\n        let {\n          base,\n          index\n        } = splitArray(type);\n        if (base === \"int\" && !_types[\"int\"]) {\n          base = \"int256\";\n        }\n        if (base === \"uint\" && !_types[\"uint\"]) {\n          base = \"uint256\";\n        }\n        return {\n          name,\n          type: base + (index || \"\")\n        };\n      });\n      links.set(type, new Set());\n      parents.set(type, []);\n      subtypes.set(type, new Set());\n    });\n    _classPrivateFieldLooseBase(this, _types2)[_types2] = JSON.stringify(types);\n    for (const name in types) {\n      const uniqueNames = new Set();\n      for (const field of types[name]) {\n        // Check each field has a unique name\n        assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", _types);\n        uniqueNames.add(field.name);\n        // Get the base type (drop any array specifiers)\n        const baseType = splitArray(field.type).base;\n        assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", _types);\n        // Is this a base encoding type?\n        const encoder = getBaseEncoder(baseType);\n        if (encoder) {\n          continue;\n        }\n        assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", _types);\n        // Add linkage\n        parents.get(baseType).push(name);\n        links.get(name).add(baseType);\n      }\n    }\n    // Deduce the primary type\n    const primaryTypes = Array.from(parents.keys()).filter(n => parents.get(n).length === 0);\n    assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\n    assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(\", \")}`, \"types\", _types);\n    defineProperties(this, {\n      primaryType: primaryTypes[0]\n    });\n    // Check for circular type references\n    function checkCircular(type, found) {\n      assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", _types);\n      found.add(type);\n      for (const child of links.get(type)) {\n        if (!parents.has(child)) {\n          continue;\n        }\n        // Recursively check children\n        checkCircular(child, found);\n        // Mark all ancestors as having this decendant\n        for (const subtype of found) {\n          subtypes.get(subtype).add(child);\n        }\n      }\n      found.delete(type);\n    }\n    checkCircular(this.primaryType, new Set());\n    // Compute each fully describe type\n    for (const [name, set] of subtypes) {\n      const st = Array.from(set);\n      st.sort();\n      _classPrivateFieldLooseBase(this, _fullTypes)[_fullTypes].set(name, encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join(\"\"));\n    }\n  }\n  /**\n   *  Returnthe encoder for the specific %%type%%.\n   */\n  getEncoder(type) {\n    let encoder = _classPrivateFieldLooseBase(this, _encoderCache)[_encoderCache].get(type);\n    if (!encoder) {\n      encoder = _classPrivateFieldLooseBase(this, _getEncoder)[_getEncoder](type);\n      _classPrivateFieldLooseBase(this, _encoderCache)[_encoderCache].set(type, encoder);\n    }\n    return encoder;\n  }\n  /**\n   *  Return the full type for %%name%%.\n   */\n  encodeType(name) {\n    const result = _classPrivateFieldLooseBase(this, _fullTypes)[_fullTypes].get(name);\n    assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n    return result;\n  }\n  /**\n   *  Return the encoded %%value%% for the %%type%%.\n   */\n  encodeData(type, value) {\n    return this.getEncoder(type)(value);\n  }\n  /**\n   *  Returns the hash of %%value%% for the type of %%name%%.\n   */\n  hashStruct(name, value) {\n    return keccak256(this.encodeData(name, value));\n  }\n  /**\n   *  Return the fulled encoded %%value%% for the [[types]].\n   */\n  encode(value) {\n    return this.encodeData(this.primaryType, value);\n  }\n  /**\n   *  Return the hash of the fully encoded %%value%% for the [[types]].\n   */\n  hash(value) {\n    return this.hashStruct(this.primaryType, value);\n  }\n  /**\n   *  @_ignore:\n   */\n  _visit(type, value, callback) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return callback(type, value);\n      }\n    }\n    // Array\n    const array = splitArray(type).array;\n    if (array) {\n      assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\n      return value.map(v => this._visit(array.prefix, v, callback));\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      return fields.reduce((accum, {\n        name,\n        type\n      }) => {\n        accum[name] = this._visit(type, value[name], callback);\n        return accum;\n      }, {});\n    }\n    assertArgument(false, `unknown type: ${type}`, \"type\", type);\n  }\n  /**\n   *  Call %%calback%% for each value in %%value%%, passing the type and\n   *  component within %%value%%.\n   *\n   *  This is useful for replacing addresses or other transformation that\n   *  may be desired on each component, based on its type.\n   */\n  visit(value, callback) {\n    return this._visit(this.primaryType, value, callback);\n  }\n  /**\n   *  Create a new **TypedDataEncoder** for %%types%%.\n   */\n  static from(types) {\n    return new TypedDataEncoder(types);\n  }\n  /**\n   *  Return the primary type for %%types%%.\n   */\n  static getPrimaryType(types) {\n    return TypedDataEncoder.from(types).primaryType;\n  }\n  /**\n   *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n   */\n  static hashStruct(name, types, value) {\n    return TypedDataEncoder.from(types).hashStruct(name, value);\n  }\n  /**\n   *  Return the domain hash for %%domain%%.\n   */\n  static hashDomain(domain) {\n    const domainFields = [];\n    for (const name in domain) {\n      if (domain[name] == null) {\n        continue;\n      }\n      const type = domainFieldTypes[name];\n      assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n      domainFields.push({\n        name,\n        type\n      });\n    }\n    domainFields.sort((a, b) => {\n      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n    });\n    return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n      EIP712Domain: domainFields\n    }, domain);\n  }\n  /**\n   *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n   */\n  static encode(domain, types, value) {\n    return concat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n  }\n  /**\n   *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n   */\n  static hash(domain, types, value) {\n    return keccak256(TypedDataEncoder.encode(domain, types, value));\n  }\n  // Replaces all address types with ENS names with their looked up address\n  /**\n   * Resolves to the value from resolving all addresses in %%value%% for\n   * %%types%% and the %%domain%%.\n   */\n  static async resolveNames(domain, types, value, resolveName) {\n    // Make a copy to isolate it from the object passed in\n    domain = Object.assign({}, domain);\n    // Allow passing null to ignore value\n    for (const key in domain) {\n      if (domain[key] == null) {\n        delete domain[key];\n      }\n    }\n    // Look up all ENS names\n    const ensCache = {};\n    // Do we need to look up the domain's verifyingContract?\n    if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n      ensCache[domain.verifyingContract] = \"0x\";\n    }\n    // We are going to use the encoder to visit all the base values\n    const encoder = TypedDataEncoder.from(types);\n    // Get a list of all the addresses\n    encoder.visit(value, (type, value) => {\n      if (type === \"address\" && !isHexString(value, 20)) {\n        ensCache[value] = \"0x\";\n      }\n      return value;\n    });\n    // Lookup each name\n    for (const name in ensCache) {\n      ensCache[name] = await resolveName(name);\n    }\n    // Replace the domain verifyingContract if needed\n    if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n      domain.verifyingContract = ensCache[domain.verifyingContract];\n    }\n    // Replace all ENS names with their address\n    value = encoder.visit(value, (type, value) => {\n      if (type === \"address\" && ensCache[value]) {\n        return ensCache[value];\n      }\n      return value;\n    });\n    return {\n      domain,\n      value\n    };\n  }\n  /**\n   *  Returns the JSON-encoded payload expected by nodes which implement\n   *  the JSON-RPC [[link-eip-712]] method.\n   */\n  static getPayload(domain, types, value) {\n    // Validate the domain fields\n    TypedDataEncoder.hashDomain(domain);\n    // Derive the EIP712Domain Struct reference type\n    const domainValues = {};\n    const domainTypes = [];\n    domainFieldNames.forEach(name => {\n      const value = domain[name];\n      if (value == null) {\n        return;\n      }\n      domainValues[name] = domainChecks[name](value);\n      domainTypes.push({\n        name,\n        type: domainFieldTypes[name]\n      });\n    });\n    const encoder = TypedDataEncoder.from(types);\n    // Get the normalized types\n    types = encoder.types;\n    const typesWithDomain = Object.assign({}, types);\n    assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n    typesWithDomain.EIP712Domain = domainTypes;\n    // Validate the data structures and types\n    encoder.encode(value);\n    return {\n      types: typesWithDomain,\n      domain: domainValues,\n      primaryType: encoder.primaryType,\n      message: encoder.visit(value, (type, value) => {\n        // bytes\n        if (type.match(/^bytes(\\d*)/)) {\n          return hexlify(getBytes(value));\n        }\n        // uint or int\n        if (type.match(/^u?int/)) {\n          return getBigInt(value).toString();\n        }\n        switch (type) {\n          case \"address\":\n            return value.toLowerCase();\n          case \"bool\":\n            return !!value;\n          case \"string\":\n            assertArgument(typeof value === \"string\", \"invalid string\", \"value\", value);\n            return value;\n        }\n        assertArgument(false, \"unsupported type\", \"type\", type);\n      })\n    };\n  }\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nfunction _getEncoder2(type) {\n  // Basic encoder type (address, bool, uint256, etc)\n  {\n    const encoder = getBaseEncoder(type);\n    if (encoder) {\n      return encoder;\n    }\n  }\n  // Array\n  const array = splitArray(type).array;\n  if (array) {\n    const subtype = array.prefix;\n    const subEncoder = this.getEncoder(subtype);\n    return value => {\n      assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\n      let result = value.map(subEncoder);\n      if (_classPrivateFieldLooseBase(this, _fullTypes)[_fullTypes].has(subtype)) {\n        result = result.map(keccak256);\n      }\n      return keccak256(concat(result));\n    };\n  }\n  // Struct\n  const fields = this.types[type];\n  if (fields) {\n    const encodedType = id(_classPrivateFieldLooseBase(this, _fullTypes)[_fullTypes].get(type));\n    return value => {\n      const values = fields.map(({\n        name,\n        type\n      }) => {\n        const result = this.getEncoder(type)(value[name]);\n        if (_classPrivateFieldLooseBase(this, _fullTypes)[_fullTypes].has(type)) {\n          return keccak256(result);\n        }\n        return result;\n      });\n      values.unshift(encodedType);\n      return concat(values);\n    };\n  }\n  assertArgument(false, `unknown type: ${type}`, \"type\", type);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"names":["getAddress","keccak256","recoverAddress","concat","defineProperties","getBigInt","getBytes","hexlify","isHexString","mask","toBeHex","toQuantity","toTwos","zeroPadValue","assertArgument","id","padding","Uint8Array","fill","BN__1","BigInt","BN_0","BN_1","BN_MAX_UINT256","hexPadRight","value","bytes","padOffset","length","slice","hexTrue","hexFalse","domainFieldTypes","name","version","chainId","verifyingContract","salt","domainFieldNames","checkString","key","JSON","stringify","domainChecks","_value","Number","isSafeInteger","toLowerCase","error","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","boundsLower","encodeType","fields","map","join","splitArray","base","index","array","prefix","count","_types2","_classPrivateFieldLooseKey","_fullTypes","_encoderCache","_getEncoder","TypedDataEncoder","types","parse","_classPrivateFieldLooseBase","constructor","_types","Object","defineProperty","_getEncoder2","writable","Map","links","parents","subtypes","keys","forEach","set","Set","uniqueNames","field","has","add","baseType","encoder","get","push","primaryTypes","Array","from","filter","n","t","primaryType","checkCircular","found","child","subtype","delete","st","sort","getEncoder","result","encodeData","hashStruct","encode","hash","_visit","callback","v","reduce","accum","visit","getPrimaryType","hashDomain","domain","domainFields","a","b","indexOf","EIP712Domain","resolveNames","resolveName","assign","ensCache","getPayload","domainValues","domainTypes","typesWithDomain","message","toString","subEncoder","encodedType","values","unshift","verifyTypedData","signature"],"sources":["C:\\Users\\DELL\\Desktop\\decentralized-voting-dapp\\src\\node_modules\\ethers\\src.ts\\hash\\typed-data.ts"],"sourcesContent":["//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport {\n    concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue,\n    assertArgument\n} from \"../utils/index.js\";\n\nimport { id } from \"./id.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n// @TODO: in v7, verifyingContract should be an AddressLike and use resolveAddress\n\n/**\n *  The domain for an [[link-eip-712]] payload.\n */\nexport interface TypedDataDomain {\n    /**\n     *  The human-readable name of the signing domain.\n     */\n    name?: null | string;\n\n    /**\n     *  The major version of the signing domain.\n     */\n    version?: null | string;\n\n    /**\n     *  The chain ID of the signing domain.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The the address of the contract that will verify the signature.\n     */\n    verifyingContract?: null | string;\n\n    /**\n     *  A salt used for purposes decided by the specific domain.\n     */\n    salt?: null | BytesLike;\n};\n\n/**\n *  A specific field of a structured [[link-eip-712]] type.\n */\nexport interface TypedDataField {\n    /**\n     *  The field name.\n     */\n    name: string;\n\n    /**\n     *  The type of the field.\n     */\n    type: string;\n};\n\nfunction hexPadRight(value: BytesLike): string {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return concat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        assertArgument(typeof(value) === \"string\", `invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(_value: any) {\n        const value = getBigInt(_value, \"domain.chainId\");\n        assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) { return Number(value); }\n        return toQuantity(value);\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        const bytes = getBytes(value, \"domain.salt\");\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return hexlify(bytes);\n    }\n}\n\nfunction getBaseEncoder(type: string): null | ((value: any) => string) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d+)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2]);\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\n\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1): width);\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1): BN_0;\n\n            return function(_value: BigNumberish) {\n                const value = getBigInt(_value, \"value\");\n\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${ type }`, \"value\", value);\n\n                return toBeHex(signed ? toTwos(value, 256): value, 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n\n            return function(value: BytesLike) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${ type }`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return zeroPadValue(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\ntype ArrayResult = {\n    base: string;         // The base type\n    index?: string;       // the full Index (if any)\n    array?: {             // The Array... (if index)\n        base: string;     // ...base type (same as above)\n        prefix: string;   // ...sans the final Index\n        count: number;    // ...the final Index (-1 for dynamic)\n    }\n};\n\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\nfunction splitArray(type: string): ArrayResult {\n    const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n        return {\n            base: match[1],\n            index: (match[2] + match[4]),\n            array: {\n                base: match[1],\n                prefix: (match[1] + match[2]),\n                count: (match[5] ? parseInt(match[5]): -1),\n            }\n        };\n    }\n\n    return { base: type };\n}\n\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    readonly primaryType!: string;\n\n    readonly #types: string;\n\n    /**\n     *  The types.\n     */\n    get types(): Record<string, Array<TypedDataField>> {\n        return JSON.parse(this.#types);\n    }\n\n    readonly #fullTypes: Map<string, string>\n\n    readonly #encoderCache: Map<string, (value: any) => string>;\n\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */\n    constructor(_types: Record<string, Array<TypedDataField>>) {\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n\n        // Link struct types to their direct child structs\n        const links: Map<string, Set<string>> = new Map();\n\n        // Link structs to structs which contain them as a child\n        const parents: Map<string, Array<string>> = new Map();\n\n        // Link all subtypes within a given struct\n        const subtypes: Map<string, Set<string>> = new Map();\n\n        const types: Record<string, Array<TypedDataField>> = { };\n        Object.keys(_types).forEach((type) => {\n            types[type] = _types[type].map(({ name, type }) => {\n\n                // Normalize the base type (unless name conflict)\n                let { base, index } = splitArray(type);\n                if (base === \"int\" && !_types[\"int\"]) { base = \"int256\"; }\n                if (base === \"uint\" && !_types[\"uint\"]) { base = \"uint256\"; }\n\n                return { name, type: (base + (index || \"\")) };\n            });\n\n            links.set(type, new Set());\n            parents.set(type, [ ]);\n            subtypes.set(type, new Set());\n        });\n        this.#types = JSON.stringify(types);\n\n        for (const name in types) {\n            const uniqueNames: Set<string> = new Set();\n\n            for (const field of types[name]) {\n\n                // Check each field has a unique name\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", _types);\n                uniqueNames.add(field.name);\n\n                // Get the base type (drop any array specifiers)\n                const baseType = splitArray(field.type).base;\n                assertArgument(baseType !== name, `circular type reference to ${ JSON.stringify(baseType) }`, \"types\", _types);\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { continue; }\n\n                assertArgument(parents.has(baseType), `unknown type ${ JSON.stringify(baseType) }`, \"types\", _types);\n\n                // Add linkage\n                (parents.get(baseType) as Array<string>).push(name);\n                (links.get(name) as Set<string>).add(baseType);\n            }\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => ((parents.get(n) as Array<string>).length === 0));\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", _types);\n\n        defineProperties<TypedDataEncoder>(this, { primaryType: primaryTypes[0] });\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Set<string>) {\n            assertArgument(!found.has(type), `circular type reference to ${ JSON.stringify(type) }`, \"types\", _types);\n\n            found.add(type);\n\n            for (const child of (links.get(type) as Set<string>)) {\n                if (!parents.has(child)) { continue; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    (subtypes.get(subtype) as Set<string>).add(child);\n                }\n            }\n\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n\n        // Compute each fully describe type\n        for (const [ name, set ] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\n        }\n    }\n\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n\n    #getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            const subtype = array.prefix;\n            const subEncoder = this.getEncoder(subtype);\n            return (value: Array<any>) => {\n                assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${ array.count }`, \"value\", value);\n\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(concat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type) as string);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            }\n        }\n\n        assertArgument(false, `unknown type: ${ type }`, \"type\", type);\n    }\n\n    /**\n     *  Return the full type for %%name%%.\n     */\n    encodeType(name: string): string {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        return result;\n    }\n\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${ array.count }`, \"value\", value);\n            return value.map((v: any) => this._visit(array.prefix, v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        assertArgument(false, `unknown type: ${ type }`, \"type\", type);\n    }\n\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    /**\n     *  Return the primary type for %%types%%.\n     */\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    /**\n     *  Return the domain hash for %%domain%%.\n     */\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            if ((<Record<string, any>>domain)[name] == null) { continue; }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return concat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({ }, domain);\n\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if ((<Record<string, any>>domain)[key] == null) {\n                delete (<Record<string, any>>domain)[key];\n            }\n        }\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get the normalized types\n        types = encoder.types;\n\n        const typesWithDomain = Object.assign({ }, types);\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n\n        typesWithDomain.EIP712Domain = domainTypes;\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        assertArgument(typeof(value) === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n\n                assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}