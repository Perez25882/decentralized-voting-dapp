{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport { ZeroHash } from \"../constants/index.js\";\nimport { concat, dataLength, getBigInt, getBytes, getNumber, hexlify, toBeArray, isHexString, zeroPadValue, assertArgument, assertPrivate } from \"../utils/index.js\";\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\nfunction toUint256(value) {\n  return zeroPadValue(toBeArray(value), 32);\n}\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nvar _r2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"r\");\nvar _s = /*#__PURE__*/_classPrivateFieldLooseKey(\"s\");\nvar _v2 = /*#__PURE__*/_classPrivateFieldLooseKey(\"v\");\nvar _networkV = /*#__PURE__*/_classPrivateFieldLooseKey(\"networkV\");\nexport class Signature {\n  /**\n   *  The ``r`` value for a signature.\n   *\n   *  This represents the ``x`` coordinate of a \"reference\" or\n   *  challenge point, from which the ``y`` can be computed.\n   */\n  get r() {\n    return _classPrivateFieldLooseBase(this, _r2)[_r2];\n  }\n  set r(value) {\n    assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n    _classPrivateFieldLooseBase(this, _r2)[_r2] = hexlify(value);\n  }\n  /**\n   *  The ``s`` value for a signature.\n   */\n  get s() {\n    return _classPrivateFieldLooseBase(this, _s)[_s];\n  }\n  set s(_value) {\n    assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n    const value = hexlify(_value);\n    assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n    _classPrivateFieldLooseBase(this, _s)[_s] = value;\n  }\n  /**\n   *  The ``v`` value for a signature.\n   *\n   *  Since a given ``x`` value for ``r`` has two possible values for\n   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n   *  values to use.\n   *\n   *  It is normalized to the values ``27`` or ``28`` for legacy\n   *  purposes.\n   */\n  get v() {\n    return _classPrivateFieldLooseBase(this, _v2)[_v2];\n  }\n  set v(value) {\n    const v = getNumber(value, \"value\");\n    assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n    _classPrivateFieldLooseBase(this, _v2)[_v2] = v;\n  }\n  /**\n   *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n   *  transactions, this value is ``null``.\n   */\n  get networkV() {\n    return _classPrivateFieldLooseBase(this, _networkV)[_networkV];\n  }\n  /**\n   *  The chain ID for EIP-155 legacy transactions. For non-legacy\n   *  transactions, this value is ``null``.\n   */\n  get legacyChainId() {\n    const v = this.networkV;\n    if (v == null) {\n      return null;\n    }\n    return Signature.getChainId(v);\n  }\n  /**\n   *  The ``yParity`` for the signature.\n   *\n   *  See ``v`` for more details on how this value is used.\n   */\n  get yParity() {\n    return this.v === 27 ? 0 : 1;\n  }\n  /**\n   *  The [[link-eip-2098]] compact representation of the ``yParity``\n   *  and ``s`` compacted into a single ``bytes32``.\n   */\n  get yParityAndS() {\n    // The EIP-2098 compact representation\n    const yParityAndS = getBytes(this.s);\n    if (this.yParity) {\n      yParityAndS[0] |= 0x80;\n    }\n    return hexlify(yParityAndS);\n  }\n  /**\n   *  The [[link-eip-2098]] compact representation.\n   */\n  get compactSerialized() {\n    return concat([this.r, this.yParityAndS]);\n  }\n  /**\n   *  The serialized representation.\n   */\n  get serialized() {\n    return concat([this.r, this.s, this.yParity ? \"0x1c\" : \"0x1b\"]);\n  }\n  /**\n   *  @private\n   */\n  constructor(guard, r, s, v) {\n    Object.defineProperty(this, _r2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _s, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _v2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _networkV, {\n      writable: true,\n      value: void 0\n    });\n    assertPrivate(guard, _guard, \"Signature\");\n    _classPrivateFieldLooseBase(this, _r2)[_r2] = r;\n    _classPrivateFieldLooseBase(this, _s)[_s] = s;\n    _classPrivateFieldLooseBase(this, _v2)[_v2] = v;\n    _classPrivateFieldLooseBase(this, _networkV)[_networkV] = null;\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n  }\n  /**\n   *  Returns a new identical [[Signature]].\n   */\n  clone() {\n    const clone = new Signature(_guard, this.r, this.s, this.v);\n    if (this.networkV) {\n      _classPrivateFieldLooseBase(clone, _networkV)[_networkV] = this.networkV;\n    }\n    return clone;\n  }\n  /**\n   *  Returns a representation that is compatible with ``JSON.stringify``.\n   */\n  toJSON() {\n    const networkV = this.networkV;\n    return {\n      _type: \"signature\",\n      networkV: networkV != null ? networkV.toString() : null,\n      r: this.r,\n      s: this.s,\n      v: this.v\n    };\n  }\n  /**\n   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n   *\n   *  @example:\n   *    Signature.getChainId(45)\n   *    //_result:\n   *\n   *    Signature.getChainId(46)\n   *    //_result:\n   */\n  static getChainId(v) {\n    const bv = getBigInt(v, \"v\");\n    // The v is not an EIP-155 v, so it is the unspecified chain ID\n    if (bv == BN_27 || bv == BN_28) {\n      return BN_0;\n    }\n    // Bad value for an EIP-155 v\n    assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n    return (bv - BN_35) / BN_2;\n  }\n  /**\n   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n   *\n   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n   *  property to include the chain ID.\n   *\n   *  @example:\n   *    Signature.getChainIdV(5, 27)\n   *    //_result:\n   *\n   *    Signature.getChainIdV(5, 28)\n   *    //_result:\n   *\n   */\n  static getChainIdV(chainId, v) {\n    return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);\n  }\n  /**\n   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n   *\n   *  @example:\n   *    // The values 0 and 1 imply v is actually yParity\n   *    Signature.getNormalizedV(0)\n   *    //_result:\n   *\n   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n   *    Signature.getNormalizedV(27)\n   *    //_result:\n   *\n   *    // Legacy EIP-155 transaction (i.e. >= 35)\n   *    Signature.getNormalizedV(46)\n   *    //_result:\n   *\n   *    // Invalid values throw\n   *    Signature.getNormalizedV(5)\n   *    //_error:\n   */\n  static getNormalizedV(v) {\n    const bv = getBigInt(v);\n    if (bv === BN_0 || bv === BN_27) {\n      return 27;\n    }\n    if (bv === BN_1 || bv === BN_28) {\n      return 28;\n    }\n    assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n    // Otherwise, EIP-155 v means odd is 27 and even is 28\n    return bv & BN_1 ? 27 : 28;\n  }\n  /**\n   *  Creates a new [[Signature]].\n   *\n   *  If no %%sig%% is provided, a new [[Signature]] is created\n   *  with default values.\n   *\n   *  If %%sig%% is a string, it is parsed.\n   */\n  static from(sig) {\n    function assertError(check, message) {\n      assertArgument(check, message, \"signature\", sig);\n    }\n    ;\n    if (sig == null) {\n      return new Signature(_guard, ZeroHash, ZeroHash, 27);\n    }\n    if (typeof sig === \"string\") {\n      const bytes = getBytes(sig, \"signature\");\n      if (bytes.length === 64) {\n        const r = hexlify(bytes.slice(0, 32));\n        const s = bytes.slice(32, 64);\n        const v = s[0] & 0x80 ? 28 : 27;\n        s[0] &= 0x7f;\n        return new Signature(_guard, r, hexlify(s), v);\n      }\n      if (bytes.length === 65) {\n        const r = hexlify(bytes.slice(0, 32));\n        const s = bytes.slice(32, 64);\n        assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n        const v = Signature.getNormalizedV(bytes[64]);\n        return new Signature(_guard, r, hexlify(s), v);\n      }\n      assertError(false, \"invalid raw signature length\");\n    }\n    if (sig instanceof Signature) {\n      return sig.clone();\n    }\n    // Get r\n    const _r = sig.r;\n    assertError(_r != null, \"missing r\");\n    const r = toUint256(_r);\n    // Get s; by any means necessary (we check consistency below)\n    const s = function (s, yParityAndS) {\n      if (s != null) {\n        return toUint256(s);\n      }\n      if (yParityAndS != null) {\n        assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n        const bytes = getBytes(yParityAndS);\n        bytes[0] &= 0x7f;\n        return hexlify(bytes);\n      }\n      assertError(false, \"missing s\");\n    }(sig.s, sig.yParityAndS);\n    assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n    // Get v; by any means necessary (we check consistency below)\n    const {\n      networkV,\n      v\n    } = function (_v, yParityAndS, yParity) {\n      if (_v != null) {\n        const v = getBigInt(_v);\n        return {\n          networkV: v >= BN_35 ? v : undefined,\n          v: Signature.getNormalizedV(v)\n        };\n      }\n      if (yParityAndS != null) {\n        assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n        return {\n          v: getBytes(yParityAndS)[0] & 0x80 ? 28 : 27\n        };\n      }\n      if (yParity != null) {\n        switch (getNumber(yParity, \"sig.yParity\")) {\n          case 0:\n            return {\n              v: 27\n            };\n          case 1:\n            return {\n              v: 28\n            };\n        }\n        assertError(false, \"invalid yParity\");\n      }\n      assertError(false, \"missing v\");\n    }(sig.v, sig.yParityAndS, sig.yParity);\n    const result = new Signature(_guard, r, s, v);\n    if (networkV) {\n      _classPrivateFieldLooseBase(result, _networkV)[_networkV] = networkV;\n    }\n    // If multiple of v, yParity, yParityAndS we given, check they match\n    assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n    assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n    return result;\n  }\n}","map":{"version":3,"names":["ZeroHash","concat","dataLength","getBigInt","getBytes","getNumber","hexlify","toBeArray","isHexString","zeroPadValue","assertArgument","assertPrivate","BN_0","BigInt","BN_1","BN_2","BN_27","BN_28","BN_35","_guard","toUint256","value","_r2","_classPrivateFieldLooseKey","_s","_v2","_networkV","Signature","r","_classPrivateFieldLooseBase","s","_value","parseInt","substring","v","networkV","legacyChainId","getChainId","yParity","yParityAndS","compactSerialized","serialized","constructor","guard","Object","defineProperty","writable","Symbol","for","clone","toJSON","_type","toString","bv","getChainIdV","chainId","getNormalizedV","from","sig","assertError","check","message","bytes","length","slice","_r","_v","undefined","result"],"sources":["C:\\Users\\DELL\\Desktop\\decentralized-voting-dapp\\src\\node_modules\\ethers\\src.ts\\crypto\\signature.ts"],"sourcesContent":["\nimport { ZeroHash } from \"../constants/index.js\";\nimport {\n    concat, dataLength, getBigInt, getBytes, getNumber, hexlify,\n    toBeArray, isHexString, zeroPadValue,\n    assertArgument, assertPrivate\n} from \"../utils/index.js\";\n\nimport type {\n    BigNumberish, BytesLike, Numeric\n} from \"../utils/index.js\";\n\n\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\n\n\nconst _guard = { };\n\n// @TODO: Allow Uint8Array\n\n/**\n *  A SignatureLike\n *\n *  @_docloc: api/crypto:Signing\n */\nexport type SignatureLike = Signature | string | {\n    r: string;\n    s: string;\n    v: BigNumberish;\n    yParity?: 0 | 1;\n    yParityAndS?: string;\n} | {\n    r: string;\n    yParityAndS: string;\n    yParity?: 0 | 1;\n    s?: string;\n    v?: number;\n} | {\n    r: string;\n    s: string;\n    yParity: 0 | 1;\n    v?: BigNumberish;\n    yParityAndS?: string;\n};\n\nfunction toUint256(value: BigNumberish): string {\n    return zeroPadValue(toBeArray(value), 32);\n}\n\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nexport class Signature {\n    #r: string;\n    #s: string;\n    #v: 27 | 28;\n    #networkV: null | bigint;\n\n    /**\n     *  The ``r`` value for a signature.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    get r(): string { return this.#r; }\n    set r(value: BytesLike) {\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = hexlify(value);\n    }\n\n    /**\n     *  The ``s`` value for a signature.\n     */\n    get s(): string { return this.#s; }\n    set s(_value: BytesLike) {\n        assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = hexlify(_value);\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n    get v(): 27 | 28 { return this.#v; }\n    set v(value: BigNumberish) {\n        const v = getNumber(value, \"value\");\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get networkV(): null | bigint { return this.#networkV; }\n\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get legacyChainId(): null | bigint {\n        const v = this.networkV;\n        if (v == null) { return null; }\n        return Signature.getChainId(v);\n    }\n\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n    get yParity(): 0 | 1 {\n        return (this.v === 27) ? 0: 1;\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n    get yParityAndS(): string {\n        // The EIP-2098 compact representation\n        const yParityAndS = getBytes(this.s);\n        if (this.yParity) { yParityAndS[0] |= 0x80; }\n        return hexlify(yParityAndS);\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n    get compactSerialized(): string {\n        return concat([ this.r, this.yParityAndS ]);\n    }\n\n    /**\n     *  The serialized representation.\n     */\n    get serialized(): string {\n        return concat([ this.r, this.s, (this.yParity ? \"0x1c\": \"0x1b\") ]);\n    }\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, r: string, s: string, v: 27 | 28) {\n        assertPrivate(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n\n    [Symbol.for('nodejs.util.inspect.custom')](): string {\n        return `Signature { r: \"${ this.r }\", s: \"${ this.s }\", yParity: ${ this.yParity }, networkV: ${ this.networkV } }`;\n    }\n\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n    clone(): Signature {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) { clone.#networkV = this.networkV; }\n        return clone;\n    }\n\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n    toJSON(): any {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: ((networkV != null) ? networkV.toString(): null),\n            r: this.r, s: this.s, v: this.v,\n        };\n    }\n\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n    static getChainId(v: BigNumberish): bigint {\n        const bv = getBigInt(v, \"v\");\n\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if ((bv == BN_27) || (bv == BN_28)) { return BN_0; }\n\n        // Bad value for an EIP-155 v\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n\n        return (bv - BN_35) / BN_2;\n    }\n\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n    static getChainIdV(chainId: BigNumberish, v: 27 | 28): bigint {\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\n    }\n\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n    static getNormalizedV(v: BigNumberish): 27 | 28 {\n        const bv = getBigInt(v);\n\n        if (bv === BN_0 || bv === BN_27) { return 27; }\n        if (bv === BN_1 || bv === BN_28) { return 28; }\n\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return (bv & BN_1) ? 27: 28;\n    }\n\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n    static from(sig?: SignatureLike): Signature {\n        function assertError(check: unknown, message: string): asserts check {\n            assertArgument(check, message, \"signature\", sig);\n        };\n\n        if (sig == null) {\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\n        }\n\n        if (typeof(sig) === \"string\") {\n            const bytes = getBytes(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = (s[0] & 0x80) ? 28: 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            if (bytes.length === 65) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            assertError(false, \"invalid raw signature length\");\n        }\n\n        if (sig instanceof Signature) { return sig.clone(); }\n\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n\n        // Get s; by any means necessary (we check consistency below)\n        const s = (function(s?: string, yParityAndS?: string) {\n            if (s != null) { return toUint256(s); }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = getBytes(yParityAndS);\n                bytes[0] &= 0x7f;\n                return hexlify(bytes);\n            }\n\n            assertError(false, \"missing s\");\n        })(sig.s, sig.yParityAndS);\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = (function(_v?: BigNumberish, yParityAndS?: string, yParity?: Numeric): { networkV?: bigint, v: 27 | 28 } {\n            if (_v != null) {\n                const v = getBigInt(_v);\n                return {\n                    networkV: ((v >= BN_35) ? v: undefined),\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28: 27) };\n            }\n\n            if (yParity != null) {\n                switch (getNumber(yParity, \"sig.yParity\")) {\n                    case 0: return { v: 27 };\n                    case 1: return { v: 28 };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n\n            assertError(false, \"missing v\");\n        })(sig.v, sig.yParityAndS, sig.yParity);\n\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) { result.#networkV =  networkV; }\n\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n\n        return result;\n    }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}