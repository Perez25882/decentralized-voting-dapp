{"ast":null,"code":"import _classPrivateFieldLooseBase from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"C:/Users/DELL/Desktop/decentralized-voting-dapp/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\n/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nvar _provider = /*#__PURE__*/_classPrivateFieldLooseKey(\"provider\");\nvar _filter = /*#__PURE__*/_classPrivateFieldLooseKey(\"filter\");\nvar _filterId = /*#__PURE__*/_classPrivateFieldLooseKey(\"filterId\");\nvar _paused = /*#__PURE__*/_classPrivateFieldLooseKey(\"paused\");\nvar _emitPromise = /*#__PURE__*/_classPrivateFieldLooseKey(\"emitPromise\");\nexport class SocketSubscriber {\n  /**\n   *  The filter.\n   */\n  get filter() {\n    return JSON.parse(_classPrivateFieldLooseBase(this, _filter)[_filter]);\n  }\n  /**\n   *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n   *  to %%filter%%.\n   */\n  constructor(provider, filter) {\n    Object.defineProperty(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _filter, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _filterId, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _paused, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _emitPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _provider)[_provider] = provider;\n    _classPrivateFieldLooseBase(this, _filter)[_filter] = JSON.stringify(filter);\n    _classPrivateFieldLooseBase(this, _filterId)[_filterId] = null;\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = null;\n    _classPrivateFieldLooseBase(this, _emitPromise)[_emitPromise] = null;\n  }\n  start() {\n    _classPrivateFieldLooseBase(this, _filterId)[_filterId] = _classPrivateFieldLooseBase(this, _provider)[_provider].send(\"eth_subscribe\", this.filter).then(filterId => {\n      ;\n      _classPrivateFieldLooseBase(this, _provider)[_provider]._register(filterId, this);\n      return filterId;\n    });\n  }\n  stop() {\n    _classPrivateFieldLooseBase(this, _filterId)[_filterId].then(filterId => {\n      if (_classPrivateFieldLooseBase(this, _provider)[_provider].destroyed) {\n        return;\n      }\n      _classPrivateFieldLooseBase(this, _provider)[_provider].send(\"eth_unsubscribe\", [filterId]);\n    });\n    _classPrivateFieldLooseBase(this, _filterId)[_filterId] = null;\n  }\n  // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n  //        and resume\n  pause(dropWhilePaused) {\n    assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"pause(false)\"\n    });\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = !!dropWhilePaused;\n  }\n  resume() {\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = null;\n  }\n  /**\n   *  @_ignore:\n   */\n  _handleMessage(message) {\n    if (_classPrivateFieldLooseBase(this, _filterId)[_filterId] == null) {\n      return;\n    }\n    if (_classPrivateFieldLooseBase(this, _paused)[_paused] === null) {\n      let emitPromise = _classPrivateFieldLooseBase(this, _emitPromise)[_emitPromise];\n      if (emitPromise == null) {\n        emitPromise = this._emit(_classPrivateFieldLooseBase(this, _provider)[_provider], message);\n      } else {\n        emitPromise = emitPromise.then(async () => {\n          await this._emit(_classPrivateFieldLooseBase(this, _provider)[_provider], message);\n        });\n      }\n      _classPrivateFieldLooseBase(this, _emitPromise)[_emitPromise] = emitPromise.then(() => {\n        if (_classPrivateFieldLooseBase(this, _emitPromise)[_emitPromise] === emitPromise) {\n          _classPrivateFieldLooseBase(this, _emitPromise)[_emitPromise] = null;\n        }\n      });\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to emit the events on the\n   *  provider.\n   */\n  async _emit(provider, message) {\n    throw new Error(\"sub-classes must implemente this; _emit\");\n  }\n}\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newHeads\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"block\", parseInt(message.number));\n  }\n}\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newPendingTransactions\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"pending\", message);\n  }\n}\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nvar _logFilter = /*#__PURE__*/_classPrivateFieldLooseKey(\"logFilter\");\nexport class SocketEventSubscriber extends SocketSubscriber {\n  /**\n   *  The filter.\n   */\n  get logFilter() {\n    return JSON.parse(_classPrivateFieldLooseBase(this, _logFilter)[_logFilter]);\n  }\n  /**\n   *  @_ignore:\n   */\n  constructor(provider, filter) {\n    super(provider, [\"logs\", filter]);\n    Object.defineProperty(this, _logFilter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _logFilter)[_logFilter] = JSON.stringify(filter);\n  }\n  async _emit(provider, message) {\n    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n  }\n}\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nvar _callbacks = /*#__PURE__*/_classPrivateFieldLooseKey(\"callbacks\");\nvar _subs = /*#__PURE__*/_classPrivateFieldLooseKey(\"subs\");\nvar _pending = /*#__PURE__*/_classPrivateFieldLooseKey(\"pending\");\nexport class SocketProvider extends JsonRpcApiProvider {\n  /**\n   *  Creates a new **SocketProvider** connected to %%network%%.\n   *\n   *  If unspecified, the network will be discovered.\n   */\n  constructor(network, _options) {\n    // Copy the options\n    const options = Object.assign({}, _options != null ? _options : {});\n    // Support for batches is generally not supported for\n    // connection-base providers; if this changes in the future\n    // the _send should be updated to reflect this\n    assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\n    options.batchMaxCount = 1;\n    // Socket-based Providers (generally) cannot change their network,\n    // since they have a long-lived connection; but let people override\n    // this if they have just cause.\n    if (options.staticNetwork == null) {\n      options.staticNetwork = true;\n    }\n    super(network, options);\n    Object.defineProperty(this, _callbacks, {\n      writable: true,\n      value: void 0\n    });\n    // Maps each filterId to its subscriber\n    Object.defineProperty(this, _subs, {\n      writable: true,\n      value: void 0\n    });\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    Object.defineProperty(this, _pending, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _callbacks)[_callbacks] = new Map();\n    _classPrivateFieldLooseBase(this, _subs)[_subs] = new Map();\n    _classPrivateFieldLooseBase(this, _pending)[_pending] = new Map();\n  }\n  // This value is only valid after _start has been called\n  /*\n  get _network(): Network {\n      if (this.#network == null) {\n          throw new Error(\"this shouldn't happen\");\n      }\n      return this.#network.clone();\n  }\n  */\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"close\":\n        return new UnmanagedSubscriber(\"close\");\n      case \"block\":\n        return new SocketBlockSubscriber(this);\n      case \"pending\":\n        return new SocketPendingSubscriber(this);\n      case \"event\":\n        return new SocketEventSubscriber(this, sub.filter);\n      case \"orphan\":\n        // Handled auto-matically within AbstractProvider\n        // when the log.removed = true\n        if (sub.filter.orphan === \"drop-log\") {\n          return new UnmanagedSubscriber(\"drop-log\");\n        }\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Register a new subscriber. This is used internalled by Subscribers\n   *  and generally is unecessary unless extending capabilities.\n   */\n  _register(filterId, subscriber) {\n    _classPrivateFieldLooseBase(this, _subs)[_subs].set(filterId, subscriber);\n    const pending = _classPrivateFieldLooseBase(this, _pending)[_pending].get(filterId);\n    if (pending) {\n      for (const message of pending) {\n        subscriber._handleMessage(message);\n      }\n      _classPrivateFieldLooseBase(this, _pending)[_pending].delete(filterId);\n    }\n  }\n  async _send(payload) {\n    // WebSocket provider doesn't accept batches\n    assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n    // @TODO: stringify payloads here and store to prevent mutations\n    // Prepare a promise to respond to\n    const promise = new Promise((resolve, reject) => {\n      _classPrivateFieldLooseBase(this, _callbacks)[_callbacks].set(payload.id, {\n        payload,\n        resolve,\n        reject\n      });\n    });\n    // Wait until the socket is connected before writing to it\n    await this._waitUntilReady();\n    // Write the request to the socket\n    await this._write(JSON.stringify(payload));\n    return [await promise];\n  }\n  // Sub-classes must call this once they are connected\n  /*\n  async _start(): Promise<void> {\n      if (this.#ready) { return; }\n       for (const { payload } of this.#callbacks.values()) {\n          await this._write(JSON.stringify(payload));\n      }\n       this.#ready = (async function() {\n          await super._start();\n      })();\n  }\n  */\n  /**\n   *  Sub-classes **must** call this with messages received over their\n   *  transport to be processed and dispatched.\n   */\n  async _processMessage(message) {\n    const result = JSON.parse(message);\n    if (result && typeof result === \"object\" && \"id\" in result) {\n      const callback = _classPrivateFieldLooseBase(this, _callbacks)[_callbacks].get(result.id);\n      if (callback == null) {\n        this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n          reasonCode: \"UNKNOWN_ID\",\n          result\n        }));\n        return;\n      }\n      _classPrivateFieldLooseBase(this, _callbacks)[_callbacks].delete(result.id);\n      callback.resolve(result);\n    } else if (result && result.method === \"eth_subscription\") {\n      const filterId = result.params.subscription;\n      const subscriber = _classPrivateFieldLooseBase(this, _subs)[_subs].get(filterId);\n      if (subscriber) {\n        subscriber._handleMessage(result.params.result);\n      } else {\n        let pending = _classPrivateFieldLooseBase(this, _pending)[_pending].get(filterId);\n        if (pending == null) {\n          pending = [];\n          _classPrivateFieldLooseBase(this, _pending)[_pending].set(filterId, pending);\n        }\n        pending.push(result.params.result);\n      }\n    } else {\n      this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n        reasonCode: \"UNEXPECTED_MESSAGE\",\n        result\n      }));\n      return;\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to send %%message%% over their\n   *  transport.\n   */\n  async _write(message) {\n    throw new Error(\"sub-classes must override this\");\n  }\n}","map":{"version":3,"names":["UnmanagedSubscriber","assert","assertArgument","makeError","JsonRpcApiProvider","_provider","_classPrivateFieldLooseKey","_filter","_filterId","_paused","_emitPromise","SocketSubscriber","filter","JSON","parse","_classPrivateFieldLooseBase","constructor","provider","Object","defineProperty","writable","value","stringify","start","send","then","filterId","_register","stop","destroyed","pause","dropWhilePaused","operation","resume","_handleMessage","message","emitPromise","_emit","Error","SocketBlockSubscriber","emit","parseInt","number","SocketPendingSubscriber","_logFilter","SocketEventSubscriber","logFilter","_wrapLog","_network","_callbacks","_subs","_pending","SocketProvider","network","_options","options","assign","batchMaxCount","staticNetwork","Map","_getSubscriber","sub","type","orphan","subscriber","set","pending","get","delete","_send","payload","Array","isArray","promise","Promise","resolve","reject","id","_waitUntilReady","_write","_processMessage","result","callback","reasonCode","method","params","subscription","push"],"sources":["C:\\Users\\DELL\\Desktop\\decentralized-voting-dapp\\src\\node_modules\\ethers\\src.ts\\providers\\provider-socket.ts"],"sourcesContent":["/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]\n */\n\nimport { UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { assert, assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiProvider } from \"./provider-jsonrpc.js\";\n\nimport type { Subscriber, Subscription } from \"./abstract-provider.js\";\nimport type { EventFilter } from \"./provider.js\";\nimport type {\n    JsonRpcApiProviderOptions, JsonRpcError, JsonRpcPayload, JsonRpcResult\n} from \"./provider-jsonrpc.js\";\nimport type { Networkish } from \"./network.js\";\n\n\ntype JsonRpcSubscription = {\n    method: string,\n    params: {\n        result: any,\n        subscription: string\n    }\n};\n\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nexport class SocketSubscriber implements Subscriber {\n    #provider: SocketProvider;\n\n    #filter: string;\n\n    /**\n     *  The filter.\n     */\n    get filter(): Array<any> { return JSON.parse(this.#filter); }\n\n    #filterId: null | Promise<string |number>;\n    #paused: null | boolean;\n\n    #emitPromise: null | Promise<void>;\n\n    /**\n     *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n     *  to %%filter%%.\n     */\n    constructor(provider: SocketProvider, filter: Array<any>) {\n        this.#provider = provider;\n        this.#filter = JSON.stringify(filter);\n        this.#filterId = null;\n        this.#paused = null;\n        this.#emitPromise = null;\n    }\n\n    start(): void {\n        this.#filterId = this.#provider.send(\"eth_subscribe\", this.filter).then((filterId) => {;\n            this.#provider._register(filterId, this);\n            return filterId;\n        });\n    }\n\n    stop(): void {\n        (<Promise<number>>(this.#filterId)).then((filterId) => {\n            if (this.#provider.destroyed) { return; }\n            this.#provider.send(\"eth_unsubscribe\", [ filterId ]);\n        });\n        this.#filterId = null;\n    }\n\n    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n    //        and resume\n    pause(dropWhilePaused?: boolean): void {\n        assert(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"pause(false)\" });\n        this.#paused = !!dropWhilePaused;\n    }\n\n    resume(): void {\n        this.#paused = null;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    _handleMessage(message: any): void {\n        if (this.#filterId == null) { return; }\n        if (this.#paused === null) {\n            let emitPromise: null | Promise<void> = this.#emitPromise;\n            if (emitPromise == null) {\n                emitPromise = this._emit(this.#provider, message);\n            } else {\n                emitPromise = emitPromise.then(async () => {\n                    await this._emit(this.#provider, message);\n                });\n            }\n            this.#emitPromise = emitPromise.then(() => {\n                if (this.#emitPromise === emitPromise) {\n                    this.#emitPromise = null;\n                }\n            });\n        }\n    }\n\n    /**\n     *  Sub-classes **must** override this to emit the events on the\n     *  provider.\n     */\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        throw new Error(\"sub-classes must implemente this; _emit\");\n    }\n}\n\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nexport class SocketBlockSubscriber extends SocketSubscriber {\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider) {\n        super(provider, [ \"newHeads\" ]);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(\"block\", parseInt(message.number));\n    }\n}\n\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nexport class SocketPendingSubscriber extends SocketSubscriber {\n\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider) {\n        super(provider, [ \"newPendingTransactions\" ]);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(\"pending\", message);\n    }\n}\n\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nexport class SocketEventSubscriber extends SocketSubscriber {\n    #logFilter: string;\n\n    /**\n     *  The filter.\n     */\n    get logFilter(): EventFilter { return JSON.parse(this.#logFilter); }\n\n    /**\n     *  @_ignore:\n     */\n    constructor(provider: SocketProvider, filter: EventFilter) {\n        super(provider, [ \"logs\", filter ]);\n        this.#logFilter = JSON.stringify(filter);\n    }\n\n    async _emit(provider: SocketProvider, message: any): Promise<void> {\n        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n    }\n}\n\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nexport class SocketProvider extends JsonRpcApiProvider {\n    #callbacks: Map<number, { payload: JsonRpcPayload, resolve: (r: any) => void, reject: (e: Error) => void }>;\n\n    // Maps each filterId to its subscriber\n    #subs: Map<number | string, SocketSubscriber>;\n\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    #pending: Map<number | string, Array<any>>;\n\n    /**\n     *  Creates a new **SocketProvider** connected to %%network%%.\n     *\n     *  If unspecified, the network will be discovered.\n     */\n    constructor(network?: Networkish, _options?: JsonRpcApiProviderOptions) {\n        // Copy the options\n        const options = Object.assign({ }, (_options != null) ? _options: { });\n\n        // Support for batches is generally not supported for\n        // connection-base providers; if this changes in the future\n        // the _send should be updated to reflect this\n        assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1,\n            \"sockets-based providers do not support batches\", \"options.batchMaxCount\", _options);\n        options.batchMaxCount = 1;\n\n        // Socket-based Providers (generally) cannot change their network,\n        // since they have a long-lived connection; but let people override\n        // this if they have just cause.\n        if (options.staticNetwork == null) { options.staticNetwork = true; }\n\n        super(network, options);\n        this.#callbacks = new Map();\n        this.#subs = new Map();\n        this.#pending = new Map();\n    }\n\n    // This value is only valid after _start has been called\n    /*\n    get _network(): Network {\n        if (this.#network == null) {\n            throw new Error(\"this shouldn't happen\");\n        }\n        return this.#network.clone();\n    }\n    */\n\n    _getSubscriber(sub: Subscription): Subscriber {\n        switch (sub.type) {\n            case \"close\":\n                return new UnmanagedSubscriber(\"close\");\n            case \"block\":\n                return new SocketBlockSubscriber(this);\n            case \"pending\":\n                return new SocketPendingSubscriber(this);\n            case \"event\":\n                return new SocketEventSubscriber(this, sub.filter);\n            case \"orphan\":\n                // Handled auto-matically within AbstractProvider\n                // when the log.removed = true\n                if (sub.filter.orphan === \"drop-log\") {\n                    return new UnmanagedSubscriber(\"drop-log\");\n                }\n        }\n        return super._getSubscriber(sub);\n    }\n\n    /**\n     *  Register a new subscriber. This is used internalled by Subscribers\n     *  and generally is unecessary unless extending capabilities.\n     */\n    _register(filterId: number | string, subscriber: SocketSubscriber): void {\n        this.#subs.set(filterId, subscriber);\n        const pending = this.#pending.get(filterId);\n        if (pending) {\n            for (const message of pending) {\n                subscriber._handleMessage(message);\n            }\n            this.#pending.delete(filterId);\n        }\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>> {\n        // WebSocket provider doesn't accept batches\n        assertArgument(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n\n        // @TODO: stringify payloads here and store to prevent mutations\n\n        // Prepare a promise to respond to\n        const promise = new Promise((resolve, reject) => {\n            this.#callbacks.set(payload.id, { payload, resolve, reject });\n        });\n\n        // Wait until the socket is connected before writing to it\n        await this._waitUntilReady();\n\n        // Write the request to the socket\n        await this._write(JSON.stringify(payload));\n\n        return <Array<JsonRpcResult | JsonRpcError>>[ await promise ];\n    }\n\n    // Sub-classes must call this once they are connected\n    /*\n    async _start(): Promise<void> {\n        if (this.#ready) { return; }\n\n        for (const { payload } of this.#callbacks.values()) {\n            await this._write(JSON.stringify(payload));\n        }\n\n        this.#ready = (async function() {\n            await super._start();\n        })();\n    }\n    */\n\n    /**\n     *  Sub-classes **must** call this with messages received over their\n     *  transport to be processed and dispatched.\n     */\n    async _processMessage(message: string): Promise<void> {\n        const result = <JsonRpcResult | JsonRpcError | JsonRpcSubscription>(JSON.parse(message));\n\n        if (result && typeof(result) === \"object\" && \"id\" in result) {\n            const callback = this.#callbacks.get(result.id);\n            if (callback == null) {\n                this.emit(\"error\", makeError(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n                    reasonCode: \"UNKNOWN_ID\",\n                    result\n                }));\n                return;\n            }\n            this.#callbacks.delete(result.id);\n\n            callback.resolve(result);\n\n        } else if (result && result.method === \"eth_subscription\") {\n            const filterId = result.params.subscription;\n            const subscriber = this.#subs.get(filterId);\n            if (subscriber) {\n                subscriber._handleMessage(result.params.result);\n            } else {\n                let pending = this.#pending.get(filterId);\n                if (pending == null) {\n                    pending = [ ];\n                    this.#pending.set(filterId, pending);\n                }\n                pending.push(result.params.result);\n            }\n\n        } else {\n            this.emit(\"error\", makeError(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n                reasonCode: \"UNEXPECTED_MESSAGE\",\n                result\n            }));\n            return;\n        }\n    }\n\n    /**\n     *  Sub-classes **must** override this to send %%message%% over their\n     *  transport.\n     */\n    async _write(message: string): Promise<void> {\n        throw new Error(\"sub-classes must override this\");\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}