{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\decentralized-voting-dapp\\\\src\\\\context\\\\VotingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport toast from \"react-hot-toast\";\nimport VotingSystemABI from \"../contracts/VotingSystem.json\";\n\n// Import deployment info with error handling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet deploymentInfo;\ntry {\n  deploymentInfo = require(\"../contracts/deployment.json\");\n} catch (error) {\n  console.error(\"Deployment file not found. Please deploy the contract first.\");\n  deploymentInfo = {\n    contractAddress: \"0x0000000000000000000000000000000000000000\",\n    electoralCommission: \"0x64E01a30a963206345bE12DEcEcDA08d78c9a2a5\"\n  };\n}\nconst VotingContext = /*#__PURE__*/createContext();\nconst initialState = {\n  account: null,\n  contract: null,\n  provider: null,\n  signer: null,\n  isConnected: false,\n  isLoading: false,\n  voter: null,\n  currentElection: null,\n  candidates: [],\n  allElections: [],\n  isAdmin: false,\n  error: null\n};\nfunction votingReducer(state, action) {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case \"SET_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload\n      };\n    case \"SET_CONNECTION\":\n      return {\n        ...state,\n        provider: action.payload.provider,\n        signer: action.payload.signer,\n        contract: action.payload.contract,\n        isConnected: true\n      };\n    case \"SET_VOTER\":\n      return {\n        ...state,\n        voter: action.payload\n      };\n    case \"SET_CURRENT_ELECTION\":\n      return {\n        ...state,\n        currentElection: action.payload\n      };\n    case \"SET_ALL_ELECTIONS\":\n      return {\n        ...state,\n        allElections: action.payload\n      };\n    case \"SET_CANDIDATES\":\n      return {\n        ...state,\n        candidates: action.payload\n      };\n    case \"SET_IS_ADMIN\":\n      return {\n        ...state,\n        isAdmin: action.payload\n      };\n    case \"SET_ERROR\":\n      return {\n        ...state,\n        error: action.payload\n      };\n    case \"DISCONNECT\":\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n}\nexport function VotingProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(votingReducer, initialState);\n\n  // Initialize Web3 connection\n  const connectWallet = async () => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed\");\n      }\n\n      // Check if contract is deployed\n      if (deploymentInfo.contractAddress === \"0x0000000000000000000000000000000000000000\") {\n        throw new Error(\"Contract not deployed. Please run 'npm run hardhat:deploy' first.\");\n      }\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // Check network\n      const chainId = await window.ethereum.request({\n        method: \"eth_chainId\"\n      });\n      if (chainId !== \"0x539\") {\n        // 1337 in hex\n        try {\n          await window.ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{\n              chainId: \"0x539\"\n            }]\n          });\n        } catch (switchError) {\n          // Network doesn't exist, add it\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: \"0x539\",\n              chainName: \"Hardhat Local\",\n              nativeCurrency: {\n                name: \"ETH\",\n                symbol: \"ETH\",\n                decimals: 18\n              },\n              rpcUrls: [\"http://127.0.0.1:8545\"]\n            }]\n          });\n        }\n      }\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n\n      // Test connection to contract\n      const contract = new ethers.Contract(deploymentInfo.contractAddress, VotingSystemABI.abi, signer);\n\n      // Test contract call\n      try {\n        await contract.electoralCommission();\n      } catch (error) {\n        throw new Error(\"Cannot connect to contract. Make sure Hardhat node is running on localhost:8545\");\n      }\n      dispatch({\n        type: \"SET_CONNECTION\",\n        payload: {\n          provider,\n          signer,\n          contract\n        }\n      });\n      dispatch({\n        type: \"SET_ACCOUNT\",\n        payload: accounts[0]\n      });\n\n      // Check if user is admin\n      const electoralCommission = await contract.electoralCommission();\n      const isAdmin = accounts[0].toLowerCase() === electoralCommission.toLowerCase();\n      dispatch({\n        type: \"SET_IS_ADMIN\",\n        payload: isAdmin\n      });\n\n      // Load voter data if not admin\n      if (!isAdmin) {\n        await loadVoterData(contract, accounts[0]);\n      }\n\n      // Load current election and all elections\n      await loadCurrentElection(contract);\n      await loadAllElections(contract);\n      toast.success(\"Wallet connected successfully!\");\n    } catch (error) {\n      console.error(\"Connection error:\", error);\n      dispatch({\n        type: \"SET_ERROR\",\n        payload: error.message\n      });\n      toast.error(error.message);\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Load voter data\n  const loadVoterData = async (contract, account) => {\n    try {\n      const voter = await contract.getVoter(account);\n      if (voter.walletAddress !== \"0x0000000000000000000000000000000000000000\") {\n        dispatch({\n          type: \"SET_VOTER\",\n          payload: voter\n        });\n      }\n    } catch (error) {\n      console.error(\"Error loading voter data:\", error);\n    }\n  };\n\n  // Load current election\n  const loadCurrentElection = async contract => {\n    try {\n      const election = await contract.getCurrentElection();\n      console.log(\"Current election loaded:\", election);\n      if (election.id > 0) {\n        dispatch({\n          type: \"SET_CURRENT_ELECTION\",\n          payload: election\n        });\n        await loadCandidates(contract, election.id);\n      } else {\n        dispatch({\n          type: \"SET_CURRENT_ELECTION\",\n          payload: null\n        });\n        dispatch({\n          type: \"SET_CANDIDATES\",\n          payload: []\n        });\n      }\n    } catch (error) {\n      console.error(\"Error loading current election:\", error);\n    }\n  };\n\n  // Load all elections\n  const loadAllElections = async contract => {\n    try {\n      const electionCounter = await contract.electionCounter();\n      const elections = [];\n      for (let i = 1; i <= electionCounter; i++) {\n        try {\n          const election = await contract.getElection(i);\n          if (election.id > 0) {\n            elections.push(election);\n          }\n        } catch (error) {\n          console.error(`Error loading election ${i}:`, error);\n        }\n      }\n      console.log(\"All elections loaded:\", elections);\n      dispatch({\n        type: \"SET_ALL_ELECTIONS\",\n        payload: elections\n      });\n    } catch (error) {\n      console.error(\"Error loading all elections:\", error);\n    }\n  };\n\n  // Load candidates for current election\n  const loadCandidates = async (contract, electionId) => {\n    try {\n      const candidates = await contract.getElectionResults(electionId);\n      dispatch({\n        type: \"SET_CANDIDATES\",\n        payload: candidates\n      });\n    } catch (error) {\n      console.error(\"Error loading candidates:\", error);\n    }\n  };\n\n  // Register voter\n  const registerVoter = async voterData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n\n      // Check voter ID availability before submitting\n      try {\n        const availability = await state.contract.checkVoterIdAvailability(voterData.voterId);\n        if (!availability.isValid) {\n          toast.error(availability.message);\n          return false;\n        }\n        if (!availability.isAvailable) {\n          toast.error(availability.message);\n          return false;\n        }\n      } catch (validationError) {\n        console.error(\"Voter ID validation error:\", validationError);\n        toast.error(\"Error validating voter ID. Please try again.\");\n        return false;\n      }\n\n      // Estimate gas first\n      const gasEstimate = await state.contract.requestRegistration.estimateGas(voterData.voterId, voterData.name, voterData.nationalId, voterData.email);\n      const tx = await state.contract.requestRegistration(voterData.voterId, voterData.name, voterData.nationalId, voterData.email, {\n        gasLimit: gasEstimate * 120n / 100n // Add 20% buffer\n      });\n      await tx.wait();\n      toast.success(\"Registration request submitted successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n\n      // Handle specific error messages\n      if (error.message && error.message.includes(\"Voter ID not found in Electoral Commission database\")) {\n        toast.error(\"Voter ID not found in Electoral Commission database\");\n      } else if (error.message && error.message.includes(\"Voter ID already registered\")) {\n        toast.error(\"This Voter ID has already been registered\");\n      } else if (error.message && error.message.includes(\"Voter ID already linked\")) {\n        toast.error(\"This Voter ID is already linked to another wallet\");\n      } else {\n        toast.error(error.reason || \"Registration failed. Please try again.\");\n      }\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Cast vote\n  const castVote = async candidateId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n\n      // Estimate gas first\n      const gasEstimate = await state.contract.vote.estimateGas(candidateId);\n      const tx = await state.contract.vote(candidateId, {\n        gasLimit: gasEstimate * 120n / 100n // Add 20% buffer\n      });\n      await tx.wait();\n\n      // Reload voter data and candidates\n      await loadVoterData(state.contract, state.account);\n      await loadCandidates(state.contract, state.currentElection.id);\n      toast.success(\"Vote cast successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Voting error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Admin functions\n  const verifyVoter = async requestId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const gasEstimate = await state.contract.verifyVoter.estimateGas(requestId);\n      const tx = await state.contract.verifyVoter(requestId, {\n        gasLimit: gasEstimate * 120n / 100n\n      });\n      await tx.wait();\n      toast.success(\"Voter verified successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Verification error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const addCandidate = async candidateData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const gasEstimate = await state.contract.addCandidate.estimateGas(candidateData.name, candidateData.party, candidateData.imageUrl || \"\");\n      const tx = await state.contract.addCandidate(candidateData.name, candidateData.party, candidateData.imageUrl || \"\", {\n        gasLimit: gasEstimate * 120n / 100n\n      });\n      await tx.wait();\n      toast.success(\"Candidate added successfully!\");\n\n      // Reload all elections to update candidate lists\n      await loadAllElections(state.contract);\n      return true;\n    } catch (error) {\n      console.error(\"Add candidate error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const createElection = async electionData => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const gasEstimate = await state.contract.createElection.estimateGas(electionData.title, electionData.description, electionData.candidateIds);\n      const tx = await state.contract.createElection(electionData.title, electionData.description, electionData.candidateIds, {\n        gasLimit: gasEstimate * 120n / 100n\n      });\n      await tx.wait();\n\n      // Reload all elections and current election\n      await loadAllElections(state.contract);\n      await loadCurrentElection(state.contract);\n      toast.success(\"Election created successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Create election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const startElection = async (electionId, duration) => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const gasEstimate = await state.contract.startElection.estimateGas(electionId, duration);\n      const tx = await state.contract.startElection(electionId, duration, {\n        gasLimit: gasEstimate * 120n / 100n\n      });\n      await tx.wait();\n\n      // Reload current election and all elections\n      await loadCurrentElection(state.contract);\n      await loadAllElections(state.contract);\n      toast.success(\"Election started successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"Start election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n  const endElection = async electionId => {\n    try {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: true\n      });\n      const gasEstimate = await state.contract.endElection.estimateGas(electionId);\n      const tx = await state.contract.endElection(electionId, {\n        gasLimit: gasEstimate * 120n / 100n\n      });\n      await tx.wait();\n\n      // Reload current election and all elections\n      await loadCurrentElection(state.contract);\n      await loadAllElections(state.contract);\n      toast.success(\"Election ended successfully!\");\n      return true;\n    } catch (error) {\n      console.error(\"End election error:\", error);\n      toast.error(error.reason || error.message);\n      return false;\n    } finally {\n      dispatch({\n        type: \"SET_LOADING\",\n        payload: false\n      });\n    }\n  };\n\n  // Auto-connect on page load\n  useEffect(() => {\n    const autoConnect = async () => {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n          });\n          if (accounts.length > 0) {\n            await connectWallet();\n          }\n        } catch (error) {\n          console.error(\"Auto-connect error:\", error);\n        }\n      }\n    };\n    autoConnect();\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", accounts => {\n        if (accounts.length === 0) {\n          dispatch({\n            type: \"DISCONNECT\"\n          });\n        } else {\n          connectWallet();\n        }\n      });\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload();\n      });\n    }\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners(\"accountsChanged\");\n        window.ethereum.removeAllListeners(\"chainChanged\");\n      }\n    };\n  }, []);\n  const value = {\n    ...state,\n    connectWallet,\n    registerVoter,\n    castVote,\n    verifyVoter,\n    addCandidate,\n    createElection,\n    startElection,\n    endElection,\n    loadCurrentElection: () => loadCurrentElection(state.contract),\n    loadAllElections: () => loadAllElections(state.contract),\n    loadCandidates: electionId => loadCandidates(state.contract, electionId)\n  };\n  return /*#__PURE__*/_jsxDEV(VotingContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 520,\n    columnNumber: 10\n  }, this);\n}\n_s(VotingProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = VotingProvider;\nexport function useVoting() {\n  _s2();\n  const context = useContext(VotingContext);\n  if (!context) {\n    throw new Error(\"useVoting must be used within a VotingProvider\");\n  }\n  return context;\n}\n_s2(useVoting, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"VotingProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useReducer","useEffect","ethers","toast","VotingSystemABI","jsxDEV","_jsxDEV","deploymentInfo","require","error","console","contractAddress","electoralCommission","VotingContext","initialState","account","contract","provider","signer","isConnected","isLoading","voter","currentElection","candidates","allElections","isAdmin","votingReducer","state","action","type","payload","VotingProvider","children","dispatch","connectWallet","window","ethereum","Error","accounts","request","method","chainId","params","switchError","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","BrowserProvider","getSigner","Contract","abi","toLowerCase","loadVoterData","loadCurrentElection","loadAllElections","success","message","getVoter","walletAddress","election","getCurrentElection","log","id","loadCandidates","electionCounter","elections","i","getElection","push","electionId","getElectionResults","registerVoter","voterData","availability","checkVoterIdAvailability","voterId","isValid","isAvailable","validationError","gasEstimate","requestRegistration","estimateGas","nationalId","email","tx","gasLimit","wait","includes","reason","castVote","candidateId","vote","verifyVoter","requestId","addCandidate","candidateData","party","imageUrl","createElection","electionData","title","description","candidateIds","startElection","duration","endElection","autoConnect","length","on","location","reload","removeAllListeners","value","Provider","fileName","lineNumber","columnNumber","_c","useVoting","context","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/decentralized-voting-dapp/src/context/VotingContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useReducer, useEffect } from \"react\"\nimport { ethers } from \"ethers\"\nimport toast from \"react-hot-toast\"\nimport VotingSystemABI from \"../contracts/VotingSystem.json\"\n\n// Import deployment info with error handling\nlet deploymentInfo\ntry {\n  deploymentInfo = require(\"../contracts/deployment.json\")\n} catch (error) {\n  console.error(\"Deployment file not found. Please deploy the contract first.\")\n  deploymentInfo = {\n    contractAddress: \"0x0000000000000000000000000000000000000000\",\n    electoralCommission: \"0x64E01a30a963206345bE12DEcEcDA08d78c9a2a5\",\n  }\n}\n\nconst VotingContext = createContext()\n\nconst initialState = {\n  account: null,\n  contract: null,\n  provider: null,\n  signer: null,\n  isConnected: false,\n  isLoading: false,\n  voter: null,\n  currentElection: null,\n  candidates: [],\n  allElections: [],\n  isAdmin: false,\n  error: null,\n}\n\nfunction votingReducer(state, action) {\n  switch (action.type) {\n    case \"SET_LOADING\":\n      return { ...state, isLoading: action.payload }\n    case \"SET_ACCOUNT\":\n      return { ...state, account: action.payload }\n    case \"SET_CONNECTION\":\n      return {\n        ...state,\n        provider: action.payload.provider,\n        signer: action.payload.signer,\n        contract: action.payload.contract,\n        isConnected: true,\n      }\n    case \"SET_VOTER\":\n      return { ...state, voter: action.payload }\n    case \"SET_CURRENT_ELECTION\":\n      return { ...state, currentElection: action.payload }\n    case \"SET_ALL_ELECTIONS\":\n      return { ...state, allElections: action.payload }\n    case \"SET_CANDIDATES\":\n      return { ...state, candidates: action.payload }\n    case \"SET_IS_ADMIN\":\n      return { ...state, isAdmin: action.payload }\n    case \"SET_ERROR\":\n      return { ...state, error: action.payload }\n    case \"DISCONNECT\":\n      return { ...initialState }\n    default:\n      return state\n  }\n}\n\nexport function VotingProvider({ children }) {\n  const [state, dispatch] = useReducer(votingReducer, initialState)\n\n  // Initialize Web3 connection\n  const connectWallet = async () => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      if (!window.ethereum) {\n        throw new Error(\"MetaMask is not installed\")\n      }\n\n      // Check if contract is deployed\n      if (deploymentInfo.contractAddress === \"0x0000000000000000000000000000000000000000\") {\n        throw new Error(\"Contract not deployed. Please run 'npm run hardhat:deploy' first.\")\n      }\n\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      })\n\n      // Check network\n      const chainId = await window.ethereum.request({ method: \"eth_chainId\" })\n      if (chainId !== \"0x539\") {\n        // 1337 in hex\n        try {\n          await window.ethereum.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: \"0x539\" }],\n          })\n        } catch (switchError) {\n          // Network doesn't exist, add it\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: \"0x539\",\n                chainName: \"Hardhat Local\",\n                nativeCurrency: {\n                  name: \"ETH\",\n                  symbol: \"ETH\",\n                  decimals: 18,\n                },\n                rpcUrls: [\"http://127.0.0.1:8545\"],\n              },\n            ],\n          })\n        }\n      }\n\n      const provider = new ethers.BrowserProvider(window.ethereum)\n      const signer = await provider.getSigner()\n\n      // Test connection to contract\n      const contract = new ethers.Contract(deploymentInfo.contractAddress, VotingSystemABI.abi, signer)\n\n      // Test contract call\n      try {\n        await contract.electoralCommission()\n      } catch (error) {\n        throw new Error(\"Cannot connect to contract. Make sure Hardhat node is running on localhost:8545\")\n      }\n\n      dispatch({\n        type: \"SET_CONNECTION\",\n        payload: { provider, signer, contract },\n      })\n\n      dispatch({ type: \"SET_ACCOUNT\", payload: accounts[0] })\n\n      // Check if user is admin\n      const electoralCommission = await contract.electoralCommission()\n      const isAdmin = accounts[0].toLowerCase() === electoralCommission.toLowerCase()\n      dispatch({ type: \"SET_IS_ADMIN\", payload: isAdmin })\n\n      // Load voter data if not admin\n      if (!isAdmin) {\n        await loadVoterData(contract, accounts[0])\n      }\n\n      // Load current election and all elections\n      await loadCurrentElection(contract)\n      await loadAllElections(contract)\n\n      toast.success(\"Wallet connected successfully!\")\n    } catch (error) {\n      console.error(\"Connection error:\", error)\n      dispatch({ type: \"SET_ERROR\", payload: error.message })\n      toast.error(error.message)\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Load voter data\n  const loadVoterData = async (contract, account) => {\n    try {\n      const voter = await contract.getVoter(account)\n      if (voter.walletAddress !== \"0x0000000000000000000000000000000000000000\") {\n        dispatch({ type: \"SET_VOTER\", payload: voter })\n      }\n    } catch (error) {\n      console.error(\"Error loading voter data:\", error)\n    }\n  }\n\n  // Load current election\n  const loadCurrentElection = async (contract) => {\n    try {\n      const election = await contract.getCurrentElection()\n      console.log(\"Current election loaded:\", election)\n\n      if (election.id > 0) {\n        dispatch({ type: \"SET_CURRENT_ELECTION\", payload: election })\n        await loadCandidates(contract, election.id)\n      } else {\n        dispatch({ type: \"SET_CURRENT_ELECTION\", payload: null })\n        dispatch({ type: \"SET_CANDIDATES\", payload: [] })\n      }\n    } catch (error) {\n      console.error(\"Error loading current election:\", error)\n    }\n  }\n\n  // Load all elections\n  const loadAllElections = async (contract) => {\n    try {\n      const electionCounter = await contract.electionCounter()\n      const elections = []\n\n      for (let i = 1; i <= electionCounter; i++) {\n        try {\n          const election = await contract.getElection(i)\n          if (election.id > 0) {\n            elections.push(election)\n          }\n        } catch (error) {\n          console.error(`Error loading election ${i}:`, error)\n        }\n      }\n\n      console.log(\"All elections loaded:\", elections)\n      dispatch({ type: \"SET_ALL_ELECTIONS\", payload: elections })\n    } catch (error) {\n      console.error(\"Error loading all elections:\", error)\n    }\n  }\n\n  // Load candidates for current election\n  const loadCandidates = async (contract, electionId) => {\n    try {\n      const candidates = await contract.getElectionResults(electionId)\n      dispatch({ type: \"SET_CANDIDATES\", payload: candidates })\n    } catch (error) {\n      console.error(\"Error loading candidates:\", error)\n    }\n  }\n\n  // Register voter\n  const registerVoter = async (voterData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      // Check voter ID availability before submitting\n      try {\n        const availability = await state.contract.checkVoterIdAvailability(voterData.voterId)\n\n        if (!availability.isValid) {\n          toast.error(availability.message)\n          return false\n        }\n\n        if (!availability.isAvailable) {\n          toast.error(availability.message)\n          return false\n        }\n      } catch (validationError) {\n        console.error(\"Voter ID validation error:\", validationError)\n        toast.error(\"Error validating voter ID. Please try again.\")\n        return false\n      }\n\n      // Estimate gas first\n      const gasEstimate = await state.contract.requestRegistration.estimateGas(\n        voterData.voterId,\n        voterData.name,\n        voterData.nationalId,\n        voterData.email,\n      )\n\n      const tx = await state.contract.requestRegistration(\n        voterData.voterId,\n        voterData.name,\n        voterData.nationalId,\n        voterData.email,\n        {\n          gasLimit: (gasEstimate * 120n) / 100n, // Add 20% buffer\n        },\n      )\n\n      await tx.wait()\n      toast.success(\"Registration request submitted successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Registration error:\", error)\n\n      // Handle specific error messages\n      if (error.message && error.message.includes(\"Voter ID not found in Electoral Commission database\")) {\n        toast.error(\"Voter ID not found in Electoral Commission database\")\n      } else if (error.message && error.message.includes(\"Voter ID already registered\")) {\n        toast.error(\"This Voter ID has already been registered\")\n      } else if (error.message && error.message.includes(\"Voter ID already linked\")) {\n        toast.error(\"This Voter ID is already linked to another wallet\")\n      } else {\n        toast.error(error.reason || \"Registration failed. Please try again.\")\n      }\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Cast vote\n  const castVote = async (candidateId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      // Estimate gas first\n      const gasEstimate = await state.contract.vote.estimateGas(candidateId)\n\n      const tx = await state.contract.vote(candidateId, {\n        gasLimit: (gasEstimate * 120n) / 100n, // Add 20% buffer\n      })\n      await tx.wait()\n\n      // Reload voter data and candidates\n      await loadVoterData(state.contract, state.account)\n      await loadCandidates(state.contract, state.currentElection.id)\n\n      toast.success(\"Vote cast successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Voting error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Admin functions\n  const verifyVoter = async (requestId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const gasEstimate = await state.contract.verifyVoter.estimateGas(requestId)\n      const tx = await state.contract.verifyVoter(requestId, {\n        gasLimit: (gasEstimate * 120n) / 100n,\n      })\n      await tx.wait()\n\n      toast.success(\"Voter verified successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Verification error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const addCandidate = async (candidateData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const gasEstimate = await state.contract.addCandidate.estimateGas(\n        candidateData.name,\n        candidateData.party,\n        candidateData.imageUrl || \"\",\n      )\n\n      const tx = await state.contract.addCandidate(\n        candidateData.name,\n        candidateData.party,\n        candidateData.imageUrl || \"\",\n        {\n          gasLimit: (gasEstimate * 120n) / 100n,\n        },\n      )\n\n      await tx.wait()\n      toast.success(\"Candidate added successfully!\")\n\n      // Reload all elections to update candidate lists\n      await loadAllElections(state.contract)\n\n      return true\n    } catch (error) {\n      console.error(\"Add candidate error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const createElection = async (electionData) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const gasEstimate = await state.contract.createElection.estimateGas(\n        electionData.title,\n        electionData.description,\n        electionData.candidateIds,\n      )\n\n      const tx = await state.contract.createElection(\n        electionData.title,\n        electionData.description,\n        electionData.candidateIds,\n        {\n          gasLimit: (gasEstimate * 120n) / 100n,\n        },\n      )\n\n      await tx.wait()\n\n      // Reload all elections and current election\n      await loadAllElections(state.contract)\n      await loadCurrentElection(state.contract)\n\n      toast.success(\"Election created successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Create election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const startElection = async (electionId, duration) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const gasEstimate = await state.contract.startElection.estimateGas(electionId, duration)\n      const tx = await state.contract.startElection(electionId, duration, {\n        gasLimit: (gasEstimate * 120n) / 100n,\n      })\n      await tx.wait()\n\n      // Reload current election and all elections\n      await loadCurrentElection(state.contract)\n      await loadAllElections(state.contract)\n\n      toast.success(\"Election started successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"Start election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  const endElection = async (electionId) => {\n    try {\n      dispatch({ type: \"SET_LOADING\", payload: true })\n\n      const gasEstimate = await state.contract.endElection.estimateGas(electionId)\n      const tx = await state.contract.endElection(electionId, {\n        gasLimit: (gasEstimate * 120n) / 100n,\n      })\n      await tx.wait()\n\n      // Reload current election and all elections\n      await loadCurrentElection(state.contract)\n      await loadAllElections(state.contract)\n\n      toast.success(\"Election ended successfully!\")\n      return true\n    } catch (error) {\n      console.error(\"End election error:\", error)\n      toast.error(error.reason || error.message)\n      return false\n    } finally {\n      dispatch({ type: \"SET_LOADING\", payload: false })\n    }\n  }\n\n  // Auto-connect on page load\n  useEffect(() => {\n    const autoConnect = async () => {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: \"eth_accounts\",\n          })\n          if (accounts.length > 0) {\n            await connectWallet()\n          }\n        } catch (error) {\n          console.error(\"Auto-connect error:\", error)\n        }\n      }\n    }\n\n    autoConnect()\n\n    // Listen for account changes\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length === 0) {\n          dispatch({ type: \"DISCONNECT\" })\n        } else {\n          connectWallet()\n        }\n      })\n\n      window.ethereum.on(\"chainChanged\", () => {\n        window.location.reload()\n      })\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners(\"accountsChanged\")\n        window.ethereum.removeAllListeners(\"chainChanged\")\n      }\n    }\n  }, [])\n\n  const value = {\n    ...state,\n    connectWallet,\n    registerVoter,\n    castVote,\n    verifyVoter,\n    addCandidate,\n    createElection,\n    startElection,\n    endElection,\n    loadCurrentElection: () => loadCurrentElection(state.contract),\n    loadAllElections: () => loadAllElections(state.contract),\n    loadCandidates: (electionId) => loadCandidates(state.contract, electionId),\n  }\n\n  return <VotingContext.Provider value={value}>{children}</VotingContext.Provider>\n}\n\nexport function useVoting() {\n  const context = useContext(VotingContext)\n  if (!context) {\n    throw new Error(\"useVoting must be used within a VotingProvider\")\n  }\n  return context\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}